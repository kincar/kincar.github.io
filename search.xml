<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue通信（组件间传值）</title>
      <link href="/2022/01/06/vue%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
      <url>/2022/01/06/vue%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue组件间传值"><a href="#Vue组件间传值" class="headerlink" title="Vue组件间传值"></a>Vue组件间传值</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ol><li><strong>作用：</strong> 用于给节点打标识</li></ol><blockquote><p>被用来给元素或子组件注册引用信息（id的替代者）；</p></blockquote><blockquote><p>应用在html标签上获取真实DOM元素，应用在组件标签上是组件实例对象（vc）</p></blockquote><ol start="2"><li><strong>读取方式：</strong> this.$refs.xxxxx</li></ol><blockquote><p>打标识：<code>&lt;h1 ref= &#39;xxx&#39;&gt;.....&lt;/h1&gt;</code>或<code>&lt;School ref= &#39;xxx&#39;&gt;&lt;/School&gt;</code></p></blockquote><blockquote><p>获取：this.$refs.xxx</p></blockquote><h3 id="props（父传子）"><a href="#props（父传子）" class="headerlink" title="props（父传子）"></a>props（父传子）</h3><ol><li><strong>作用：</strong> 用于父组件给子组件传递数据</li></ol><blockquote><p>功能：让组件接收外部传过来的数据</p></blockquote><ol start="2"><li><p>传递数据： <code>&lt;Demo :name=&#39;xxx&#39; :age=&#39;xxx&#39; :setName=&#39;xxx&#39;/&gt;</code></p></li><li><p>接收数据：</p></li></ol><ul><li><strong>读取方式一：只接收名称</strong></li></ul><pre class=" language-bash"><code class="language-bash">props:<span class="token punctuation">[</span><span class="token string">'name'</span>,<span class="token string">'age'</span>,<span class="token string">'setName'</span><span class="token punctuation">]</span></code></pre><ul><li><strong>读取方式二：</strong> 限制名称和类型</li></ul><pre class=" language-bash"><code class="language-bash">props:<span class="token punctuation">{</span>    name: String,    age: Number,    setName: Function<span class="token punctuation">}</span></code></pre><ul><li><strong>读取方式三：</strong> 限制名称/类型/必要性/默认值</li></ul><pre class=" language-bash"><code class="language-bash">props:<span class="token punctuation">{</span>    name:<span class="token punctuation">{</span>        type: String, //类型        required: true, //必要性        default: xxx //默认值    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实要进行修改，那么请复制props的内容到data中一份，然后去修改data中的数据。===&gt; v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></blockquote><h3 id="组件化编码流程（通用）"><a href="#组件化编码流程（通用）" class="headerlink" title="组件化编码流程（通用）"></a>组件化编码流程（通用）</h3><ol><li><p>拆分静态组件：组件要按照功能点拆分抽取，命名不要与html元素冲突</p></li><li><p>实现动态组件：数据的类型、名称是什么，考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p> 2.1 一个组件在用：放在组件自身即可</p><p> 2.2 一些组件在用: 放在他们的共同的父组件上（状态提升）</p></li><li><p>交互——从绑定事件监听开始</p></li></ol><h3 id="组件的自定义事件（子传父）"><a href="#组件的自定义事件（子传父）" class="headerlink" title="组件的自定义事件（子传父）"></a>组件的自定义事件（子传父）</h3><blockquote><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<code>事件的回调在A中</code>）</p></blockquote><ol><li><strong>绑定自定义事件</strong></li></ol><pre class=" language-bash"><code class="language-bash">在父组件中：<span class="token operator">&lt;</span>Header @addTodo<span class="token operator">=</span><span class="token string">"addTodo"</span>/<span class="token operator">></span>或<span class="token operator">&lt;</span>Header ref<span class="token operator">=</span><span class="token string">"header"</span>/<span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>mounted<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    this.<span class="token variable">$refs</span>.header.<span class="token variable">$on</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span>, this.addTodo<span class="token punctuation">)</span>  // 回调配置在methods中    或 this.<span class="token variable">$refs</span>.header.<span class="token variable">$on</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span>,<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> // 回调使用箭头函数<span class="token punctuation">}</span></code></pre><blockquote><p>若想让自定义事件只能触发一次，可以使用once修饰符，或$once方法</p></blockquote><ol start="2"><li><strong>触发自定义事件</strong></li></ol><pre class=" language-bash"><code class="language-bash">在子组件中：this.<span class="token variable">$emit</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span>, 数据<span class="token punctuation">)</span></code></pre><ol start="3"><li><strong>解绑自定义事件</strong></li></ol><pre class=" language-bash"><code class="language-bash">在子组件中：this.<span class="token variable">$off</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span><span class="token punctuation">)</span></code></pre><blockquote><p>组件上可以绑定原生DOM事件，需要使用native修饰符</p></blockquote><blockquote><p>注意：通过this.$refs.header.$on(‘addTodo’, 回调)绑定自定义事件时，回调<code>要么配置在methods中，要么用箭头函数</code>，否则this指向会出问题!</p></blockquote><h3 id="全局事件总线（任意）"><a href="#全局事件总线（任意）" class="headerlink" title="全局事件总线（任意）"></a>全局事件总线（任意）</h3><ol><li>一种组件间通信的方式，适用于<code>任意组件间通信</code></li></ol><blockquote><p>Vue原型对象上包含事件处理的方法</p><blockquote><p>$on(eventName, listener): 绑定自定义事件监听<br>$emit(eventName, data): 分发自定义事件<br>$off(eventName): 解绑自定义事件<br>$once(eventName, listener): 绑定事件监听，但只能处理一次</p></blockquote></blockquote><blockquote><p>所有组件实例对象的原型对象的原型对象就是Vue的原型对象</p><blockquote><p>所有组件对象都能看到Vue原型对象上的属性和方法<br>Vue.prototype.$bus = new Vue(),所有组件对象都能看到$bus这个属性对象</p></blockquote></blockquote><blockquote><p>全局事件总线</p><blockquote><p>包含事件处理相关方法的对象（只有一个）<br>所有组件都可以得到</p></blockquote></blockquote><ol start="2"><li>安装全局事件总线：</li></ol><pre class=" language-bash"><code class="language-bash">入口文件main.js中：new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    beforeCreate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> // 尽量早的执行挂载全局事件总线对象的操作        Vue.prototype.<span class="token variable">$bus</span> <span class="token operator">=</span> this // 安装全局事件总线，<span class="token variable">$bus</span>就是当前应用的vm    <span class="token punctuation">}</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.<span class="token variable">$mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span></code></pre><ol start="3"><li><p>绑定事件（使用事件总线）：</p><p> 3.1 接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<code>回调留在A组件自身</code></p><pre class=" language-bash"><code class="language-bash">methods<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    demo<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>mounted<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.<span class="token variable">$bus</span><span class="token keyword">.</span><span class="token variable">$on</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span>,this.demo<span class="token punctuation">)</span><span class="token punctuation">}</span>beforeDestroy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.<span class="token variable">$bus</span><span class="token keyword">.</span><span class="token variable">$off</span><span class="token punctuation">(</span>'xxxx<span class="token punctuation">)</span> // 解绑事件：最好在beforeDestroy钩子中，用<span class="token variable">$off</span>去解绑<span class="token variable"><span class="token variable">`</span>当前组件所用到的<span class="token variable">`</span></span>事件<span class="token punctuation">}</span></code></pre><p> 3.2 分发事件（提供数据）：this.$bus.$emit(‘xxxx’, 数据)</p></li></ol><h3 id="消息订阅与发布（任意）"><a href="#消息订阅与发布（任意）" class="headerlink" title="消息订阅与发布（任意）"></a>消息订阅与发布（任意）</h3><ol><li>一种组件间通信的方式，适用于<code>任意组件间通信</code></li></ol><blockquote><p>与全局事件总线很相似，但需要引入第三方库，更推荐使用全局事件总线</p></blockquote><blockquote><p>它包含以下操作：</p><blockquote><p>订阅消息 –对应绑定事件监听<br>发布消息 –分发事件<br>取消消息订阅 –解绑事件监听</p></blockquote></blockquote><blockquote><p>相关语法：</p><blockquote><p>pubsub.subscribe(‘msgName’, function(msgName, data){ })<br>pubsub.publish(‘msgName’, data)<br>pubsub.unsubscribe(token)</p></blockquote></blockquote><ol start="2"><li><p>使用步骤</p><p> 2.1 安装pubsub: npm i -S pubsub-js</p><p> 2.2 引入：import pubsub from ‘pubsub-js’</p><p> 2.3 接受数据：A组件想接受数据，则在A组件中订阅消息，订阅的<code>回调留在A组件自身</code></p><pre class=" language-bash"><code class="language-bash">methods<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    demo<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>mounted<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.pid <span class="token operator">=</span> pubsub.subscribe<span class="token punctuation">(</span><span class="token string">'xxx'</span>, this.demo<span class="token punctuation">)</span> // 订阅消息<span class="token punctuation">}</span>beforeDestroy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pubsub.unsubscribe<span class="token punctuation">(</span>this.pid<span class="token punctuation">)</span> //最好在beforeDestroy钩子中，用pubSub.unsubscribe<span class="token punctuation">(</span>this.pid<span class="token punctuation">)</span>去<span class="token variable"><span class="token variable">`</span>取消订阅<span class="token variable">`</span></span><span class="token punctuation">}</span></code></pre><p> 2.4 提供数据：pubsub.publish(‘xxx’, 数据) // 发布消息</p></li></ol><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><ol><li><p>语法： this.$nextTick(回调函数)</p></li><li><p>作用：在下一次DOM更新结束后执行其指定的回调</p></li><li><p>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue常用内置指令</title>
      <link href="/2022/01/03/vue%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/01/03/vue%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue-常用内置指令"><a href="#Vue-常用内置指令" class="headerlink" title="Vue 常用内置指令"></a>Vue 常用内置指令</h2><blockquote><p>模板语法分为两类：插值语法和指令语法</p><blockquote><p><strong>插值语法</strong>：用于解析标签体内容。<br>写法是<code>&#123;&#123;xxx&#125;&#125;</code>，xxx 是 js 表达式，并且可以直接读取到 data 中的所有属性<br><strong>指令语法</strong>：用于解析标签（包含：标签属性、标签体内容、绑定事件…）<br>举例：v-bind:href = “xxx”或简写为:hre f= “xxx”，xxx 同样是 js 表达式，并且可以直接读取到 data 中的所有属性。<br>注意：Vue 中有很多指令，并且形式都是 v-???</p></blockquote></blockquote><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><ul><li><p>更新元素的<code>textContent</code></p></li><li><p>向指定节点渲染文本内容，会替换掉原节点内容</p></li></ul><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><ul><li><p>更新元素的<code>innerHTML</code></p></li><li><p>向指定节点渲染包含 HTML 结构的内容，会替换掉原节点的内容</p></li><li><p>严重注意：有安全性问题，容易导致 XSS 攻击，一定要用在可信的内容上，永远不要用在用户提交的内容上</p></li></ul><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><ul><li><p>如果为 true，当前标签才会输出到页面</p></li><li><p>动态控制节点是否存在</p></li><li><p>不展示的 DOM 元素直接被移除，适用于切换频率较低的场景</p></li></ul><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><ul><li><p>如果为 false，当前标签才会输出到页面</p></li><li><p>与 v-if、v-else-if 搭配使用</p></li></ul><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><ul><li><p>通过控制 diaplay 样式来控制显示/隐藏</p></li><li><p>动态控制节点是否展示</p></li><li><p>不展示的 DOM 元素未被移除，仅仅是使用样式隐藏掉，适用于切换频率较高的场景</p></li></ul><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><ul><li>遍历数组、对象、字符串</li></ul><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li>绑定事件监听，一般简写为 <code>@</code></li></ul><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ul><li><p>绑定解析表达式，一般简写为 <code>:xxx</code></p></li><li><p>单向数据绑定。数据只能从 data 流向页面</p></li></ul><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><ul><li><p>双向数据绑定。数据不仅能从 data 流向页面，还可以从页面流向 data</p></li><li><p>一般都应用在<code>表单类</code>元素上（如：input、select）</p></li><li><p>v-model:value 可简写为<code> v-model</code>，因为它默认收集的就是 value 值</p></li></ul><h3 id="v-cloak（没有值）"><a href="#v-cloak（没有值）" class="headerlink" title="v-cloak（没有值）"></a>v-cloak（没有值）</h3><ul><li><p>vue 实例创建完毕并接管容器后，会删除掉 v-cloak 属性</p></li><li><p>与 css 配合：<code>[v-cloak]&#123;diaplay: none&#125;</code>可以解决网速慢时页面展示出的问题</p></li></ul><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><ul><li>所在节点初次动态渲染后，就视为静态内容了。以后的数据结构改变不会引起 v-once 所在结构的更新，可以用于优化性能</li></ul><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><ul><li>跳过其所在节点的编译过程，可以用它来跳过没有使用指令语法、插值语法的节点，加快编译</li></ul>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的key</title>
      <link href="/2022/01/02/vue%E4%B8%AD%E7%9A%84key/"/>
      <url>/2022/01/02/vue%E4%B8%AD%E7%9A%84key/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vue、React-中的-key-有什么作用？"><a href="#Vue、React-中的-key-有什么作用？" class="headerlink" title="Vue、React 中的 key 有什么作用？"></a>Vue、React 中的 key 有什么作用？</h1><h2 id="虚拟-DOM-中-key-的作用"><a href="#虚拟-DOM-中-key-的作用" class="headerlink" title="虚拟 DOM 中 key 的作用"></a>虚拟 DOM 中 key 的作用</h2><p>key 是虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据<code>新数据</code>生成<code>新的虚拟DOM</code>，随后 Vue 进行<code>新虚拟DOM</code>与<code>旧虚拟DOM</code>的差异比较，比较规则如下</p><h2 id="对比规则"><a href="#对比规则" class="headerlink" title="对比规则"></a>对比规则</h2><ol><li>旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：<ul><li>若虚拟 DOM 中内容没变，直接使用之前的真实 DOM！</li><li>若虚拟 DOM 中内容变了，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM</li></ul></li><li> 旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key，创建新的真实 DOM，随后渲染到页面。</li></ol><h2 id="用-index-作为-key-可能引发的问题"><a href="#用-index-作为-key-可能引发的问题" class="headerlink" title="用 index 作为 key 可能引发的问题"></a>用 index 作为 key 可能引发的问题</h2><ul><li><p>若对数据进行逆序添加、逆序删除等破坏顺序操作：会产生没有必要的真实 DOM 更新 ==&gt; 界面效果没问题，但效率低</p></li><li><p>如果结构中还包含输入类的 DOM：会产生错误 DOM 更新 ==&gt; 界面有问题<br><img src="https://cdn.jsdelivr.net/gh/kincar/image@main/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220102213548.png" alt="添加前"><br><img src="https://cdn.jsdelivr.net/gh/kincar/image@main/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220102213727.png" alt="添加后"></p></li></ul><h2 id="开发中如何选择-key？"><a href="#开发中如何选择-key？" class="headerlink" title="开发中如何选择 key？"></a>开发中如何选择 key？</h2><ul><li>最好使用每条数据的唯一标识作为 key，比如 id、手机号、身份证号、学号等<code>唯一值</code></li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表、用于展示，使用 index 作为 key 是没有问题的</li></ul>]]></content>
      
      
      <categories>
          
          <category> key </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2021/12/29/markdawn%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/12/29/markdawn%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown-基础语法"><a href="#Markdown-基础语法" class="headerlink" title="Markdown 基础语法"></a>Markdown 基础语法</h1><h2 id="一、标题（常用）"><a href="#一、标题（常用）" class="headerlink" title="一、标题（常用）"></a>一、标题（常用）</h2><p>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><blockquote><p>注意：标准语法一般在#后跟个空格再写文字。</p></blockquote><p>示例：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这是一级标题</span><span class="token comment" spellcheck="true">## 这是二级标题</span><span class="token comment" spellcheck="true">### 这是三级标题</span><span class="token comment" spellcheck="true">#### 这是四级标题</span><span class="token comment" spellcheck="true">##### 这是五级标题</span><span class="token comment" spellcheck="true">###### 这是六级标题</span></code></pre><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h2 id="二、字体（常用）"><a href="#二、字体（常用）" class="headerlink" title="二、字体（常用）"></a>二、字体（常用）</h2><ul><li><strong>加粗：</strong></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><em>斜体：</em></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><strong><em>斜体加粗：</em></strong></li></ul><p>要倾斜和加粗的文字分别用三个*号包起来</p><ul><li><del>删除线：</del></li></ul><p>要加删除线的问女子左右分别用两个~~号包起来</p><p>示例：</p><pre class=" language-bash"><code class="language-bash">**我是加粗的文字***我是倾斜的文字****我是斜体加粗的文字***~~我是加删除线的文字~~</code></pre><p>效果如下：</p><p><strong>我是加粗的文字</strong></p><p><em>我是倾斜的文字</em></p><p><strong><em>我是斜体加粗的文字</em></strong></p><p><del>我是加删除线的文字</del></p><h2 id="三、引用（常用）"><a href="#三、引用（常用）" class="headerlink" title="三、引用（常用）"></a>三、引用（常用）</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n 个…，<br>貌似可以一直加，但没神马乱用</p><p>示例：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">></span> 一盏灯， 一片昏黄； 一简书， 一杯淡茶。<span class="token operator">>></span> 守着那一份淡定， 品读属于自己的寂寞。<span class="token operator">>></span><span class="token operator">></span>  保持淡定， 才能欣赏到最美丽的风景！<span class="token operator">>></span><span class="token operator">>></span> 保持淡定， 人生从此不再寂寞。</code></pre><p>效果如下：</p><blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。</p><blockquote><p>守着那一份淡定， 品读属于自己的寂寞。</p><blockquote><p>保持淡定， 才能欣赏到最美丽的风景！</p><blockquote><p>保持淡定， 人生从此不再寂寞。</p></blockquote></blockquote></blockquote></blockquote><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或者三个以上的-或者*都可以</p><p>示例：</p><pre class=" language-bash"><code class="language-bash">-------*******</code></pre><p>效果如下：</p><hr><hr><hr><hr><h2 id="五、图片（常用）"><a href="#五、图片（常用）" class="headerlink" title="五、图片（常用）"></a>五、图片（常用）</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>图片alt<span class="token punctuation">]</span><span class="token punctuation">(</span>图片地址 <span class="token string">"图片title"</span><span class="token punctuation">)</span></code></pre><p>图片 alt 就是显示在图片下面的文字，相当于对图片内容的解释<br>图片 title 是图片的标题，当鼠标移到图片上时显示的内容。title 可加可不加</p><p>示例：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>blockchain<span class="token punctuation">]</span><span class="token punctuation">(</span>https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u<span class="token operator">=</span>702257389,1274025419<span class="token operator">&amp;</span>fm<span class="token operator">=</span>27<span class="token operator">&amp;</span>gp<span class="token operator">=</span>0.jpg <span class="token string">"区块链"</span><span class="token punctuation">)</span></code></pre><p>效果如下：</p><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&fm=27&gp=0.jpg" alt="blockchain" title="区块链"></p><p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p><p>markdown 格式追求的是简单、多平台统一。name 图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。</p><p>关于图床的选择，可以看看这一篇文章：<br><a href="https://www.jianshu.com/p/ea1eb11db63f">markdown 图床</a></p><h2 id="六、超链接（常用）"><a href="#六、超链接（常用）" class="headerlink" title="六、超链接（常用）"></a>六、超链接（常用）</h2><p>语法：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>超链接<span class="token punctuation">]</span><span class="token punctuation">(</span>超链接地址 <span class="token string">"超链接title"</span><span class="token punctuation">)</span></code></pre><p>title 可加可不加</p><p>示例：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>简书<span class="token punctuation">]</span><span class="token punctuation">(</span>http://jianshu.com<span class="token punctuation">)</span><span class="token punctuation">[</span>百度<span class="token punctuation">]</span><span class="token punctuation">(</span>http://baidu.com<span class="token punctuation">)</span></code></pre><p>效果如下：</p><p><a href="http://jianshu.com/">简书</a></p><p><a href="http://baidu.com/">百度</a></p><blockquote><p>注意：Markdown 本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用 html 语言的 a 标签代替</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"超链接地址"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>超链接名<span class="token operator">&lt;</span>/a<span class="token operator">></span>示例：<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://www.jianshu.com/u/1f5ac0cf6a8b"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>简书<span class="token operator">&lt;</span>/a<span class="token operator">></span></code></pre><p>效果如下：<br><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><h2 id="七、列表（常用）"><a href="#七、列表（常用）" class="headerlink" title="七、列表（常用）"></a>七、列表（常用）</h2><p><strong>无序列表</strong></p><p>语法：</p><p>无序列表用 - + * 任何一种都可以</p><pre class=" language-bash"><code class="language-bash">    - 列表内容    + 类表内容    * 列表内容</code></pre><blockquote><p>注意：-+*跟内容之间都要有一个空格</p></blockquote><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p><strong>有序列表</strong></p><p>语法：</p><p>数字加点</p><pre class=" language-bash"><code class="language-bash">    1. 列表内容    2. 列表内容    3. 列表内容</code></pre><blockquote><p>注意：序号跟内容之间要有空格</p></blockquote><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><p><strong>列表嵌套</strong></p><p>上一级和下一级之间敲三个空格即可</p><ul><li><p>一级无序列表</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级无序列表</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li><p>一级有序列表</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级有序列表</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><h2 id="八、表格（常用）"><a href="#八、表格（常用）" class="headerlink" title="八、表格（常用）"></a>八、表格（常用）</h2><p>语法：</p><pre class=" language-bash"><code class="language-bash">表头<span class="token operator">|</span>表头<span class="token operator">|</span>表头---<span class="token operator">|</span>:---:<span class="token operator">|</span>---:内容<span class="token operator">|</span>内容<span class="token operator">|</span>内容内容<span class="token operator">|</span>内容<span class="token operator">|</span>内容</code></pre><p>第二行分割表头和内容<br>有一个就行，为了对齐，多加了几个<br>文字默认居左 -两边加：表示文字居中 -右边加：表示文字居右</p><blockquote><p>注意：原生的语法两边都要用|包起来。此处省略</p></blockquote><p>示例：</p><pre class=" language-bash"><code class="language-bash">    姓名<span class="token operator">|</span>技能<span class="token operator">|</span>排行    --<span class="token operator">|</span>:--:<span class="token operator">|</span>--:    刘备<span class="token operator">|</span>哭<span class="token operator">|</span>大哥    关羽<span class="token operator">|</span>打<span class="token operator">|</span>二哥    张飞<span class="token operator">|</span>骂<span class="token operator">|</span>三弟</code></pre><p>效果如下：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h2 id="九、代码（常用）"><a href="#九、代码（常用）" class="headerlink" title="九、代码（常用）"></a>九、代码（常用）</h2><p>语法：</p><p>单行代码（只有一段，不分行）：代码之间分别用一个反引号`包起来</p><pre class=" language-bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span>代码内容<span class="token variable">`</span></span></code></pre><p>代码块（多行）：代码之间分别用三个反引号```包起来，并且两边的反引号单独占一行</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>``<span class="token variable"><span class="token variable">`</span><span class="token punctuation">)</span>    代码<span class="token punctuation">..</span>.    代码<span class="token punctuation">..</span>.    代码<span class="token punctuation">..</span>.<span class="token punctuation">(</span><span class="token variable">`</span></span>``<span class="token punctuation">)</span></code></pre><blockquote><p>注意：为了防止转义，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可</p></blockquote><p>示例：</p><p>单行代码</p><pre class=" language-bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span>create Vue Demo<span class="token variable">`</span></span></code></pre><p>代码块</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>```<span class="token punctuation">)</span>    <span class="token keyword">function</span> fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'这是一段牛逼的代码'</span>    <span class="token punctuation">}</span>    fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>```<span class="token punctuation">)</span></code></pre><p>效果如下：</p><p>单行代码</p><p><code>create Vue Demo</code></p><p>代码块</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">'这是一段牛逼的代码'</span><span class="token punctuation">}</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo基本用法</title>
      <link href="/2021/12/28/hello-world/"/>
      <url>/2021/12/28/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎光临[Hexo] (<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a>) ! 这是你的第一篇文章。 查看<a href="https://hexo.io/zh-cn/docs/">文档</a>获取更多信息。 如果你在使用 Hexo 时遇到任何问题，你可以在<a href="https://hexo.io/zh-cn/docs/troubleshooting.html">故障排除</a>中找到答案，或者你可以在<a href="https://github.com/hexojs/hexo/issues">GitHub</a>上问我。</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h3><blockquote><p>新建一篇文章</p></blockquote><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><blockquote><p>文章标题可以在对应 md 文件里改，新建时标题可以写的简单写</p></blockquote><p>More info: <a href="https://hexo.io/zh-cn/docs/writing.html">Writing</a></p><h3 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h3><blockquote><p>启动服务器，用于预览主题，默认地址： <a href="http://localhost:4000/">http://localhost:4000/</a></p></blockquote><blockquote><p>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可</p></blockquote><blockquote><p>对 Hexo 根目录_config.yml 的修改，需要重启本地服务器才能预览效果</p></blockquote><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>-p 重设端口</p><p>More info: <a href="https://hexo.io/zh-cn/docs/server.html">Server</a></p><h3 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h3><blockquote><p>生成静态文件到默认设置的 public 文件</p></blockquote><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>-d 文件生成后立即部署网站<br>-w 监视文件变动</p><p>More info: <a href="https://hexo.io/zh-cn/docs/generating.html">Generating</a></p><h3 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h3><blockquote><p>自动生成网站静态文件，并部署到设定的仓库</p></blockquote><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>-g 部署之前预先生成静态文件</p><p>More info: <a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">Deployment</a></p><h3 id="hexo-cl"><a href="#hexo-cl" class="headerlink" title="hexo cl"></a>hexo cl</h3><blockquote><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)</p></blockquote><blockquote><p>网站显示异常时可以执行这条命令试试</p></blockquote><pre class=" language-bash"><code class="language-bash">$ hexo clean</code></pre><h3 id="hexo-new-page"><a href="#hexo-new-page" class="headerlink" title="hexo new page"></a>hexo new page</h3><pre class=" language-bash"><code class="language-bash">hexo new page xxx</code></pre><blockquote><p>新建一个标题为 xxx 的页面，默认链接地址为主页地址/xxx/</p></blockquote><blockquote><p>标题可以为中文，但一般习惯用英文</p></blockquote><blockquote><p>页面标题和文章一样可以随意修改</p></blockquote><blockquote><p>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
