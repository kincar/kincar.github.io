<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue前台项目笔记</title>
      <link href="/2022/01/12/vue-qian-tai-xiang-mu-bi-ji/"/>
      <url>/2022/01/12/vue-qian-tai-xiang-mu-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、前端Vue核心"><a href="#一、前端Vue核心" class="headerlink" title="一、前端Vue核心"></a>一、前端Vue核心</h2><p>开发一个前端模块可以概括为：</p><ol><li>写静态页面、拆分静态组件；</li><li>发请求（API）；</li><li>vuex（action、mutations、state三连环）；</li><li>组件获取仓库数据，动态展示；</li></ol><h2 id="二、开启"><a href="#二、开启" class="headerlink" title="二、开启"></a>二、开启</h2><ol><li><p>使用vue cli（脚手架）搭建项目 ——基于vue+webpack+es6</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -g @vue/clivue create xxx<span class="token function">cd</span> xxx<span class="token function">npm</span> run serve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编码测试与打包发布项目</p><pre class="line-numbers language-bash"><code class="language-bash">//编码测试<span class="token function">npm</span> run serve//访问：http://localhost:8080//打包发布<span class="token function">npm</span> run build<span class="token function">npm</span> <span class="token function">install</span> -g serveserve dist -p 5000访问：http://localhost:5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="三、项目源码目录设计"><a href="#三、项目源码目录设计" class="headerlink" title="三、项目源码目录设计"></a>三、项目源码目录设计</h2><pre class="line-numbers language-bash"><code class="language-bash">//项目结构<span class="token operator">|</span>-- node_modules    <span class="token operator">|</span>-- public       <span class="token operator">|</span>-- index.html: 主页面文件    <span class="token operator">|</span>-- src       <span class="token operator">|</span>-- main.js: 应用入口js    <span class="token operator">|</span>-- babel.config.js: babel的配置文件    <span class="token operator">|</span>-- vue.config.js: vue的配置文件    <span class="token operator">|</span>-- .gitignore: git版本管制忽略的配置    <span class="token operator">|</span>-- package.json: 应用包配置文件     <span class="token operator">|</span>-- README.md: 应用描述说明的readme文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/kincar/image@main/%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E8%AE%BE%E8%AE%A1.png"></p><h2 id="四、vue-router"><a href="#四、vue-router" class="headerlink" title="四、vue-router"></a>四、vue-router</h2><ul><li><p>下载依赖包</p><p><code>npm install -S vue-router</code></p></li><li><p>编码</p><ul><li><p>1）pages/Home/index.vue</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>Home<span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token punctuation">{</span>    name: <span class="token string">'Home'</span>,    data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2）pages/Search/index.vue</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>Search<span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>srcipt<span class="token operator">></span><span class="token function">export</span> default <span class="token punctuation">{</span>    name: <span class="token string">'Search'</span>,    data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/script lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span>/style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>3）pages/Register/index.vue</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>Register<span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token punctuation">{</span>    name: <span class="token string">'Register'</span>,    data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>4）pages/Login/index.vue</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>Login<span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">export</span> default<span class="token punctuation">{</span>        name: <span class="token string">'Login'</span>,        data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>5）router/routes.js</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> Home from <span class="token string">'@/pages/Home'</span><span class="token function">import</span> Search from <span class="token string">'@/pages/Search'</span><span class="token function">import</span> Register from <span class="token string">'@/pages/Register'</span><span class="token function">import</span> Login from <span class="token string">'@/pages/Login'</span>/*所有静态路由配置的数组*/<span class="token function">export</span> default <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path: <span class="token string">'/'</span>,        component: Home    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>        path: <span class="token string">'/search'</span>,        component: Search    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>        path: <span class="token string">'/register'</span>,        component: Register    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>        path: <span class="token string">'/login'</span>,        component: Login    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>6）router/index.js</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> Vue from <span class="token string">'vue'</span><span class="token function">import</span> VueRouter from <span class="token string">'/vue-router'</span><span class="token function">import</span> routes from <span class="token string">'./routes'</span>//声明使用插件Vue.use<span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span>//向外暴露路由器对象<span class="token function">export</span> default new VueRouter<span class="token punctuation">(</span><span class="token punctuation">{</span>    mode: <span class="token string">'history'</span>, //没有<span class="token comment" spellcheck="true">#的模式</span>    routes, //注册所有路由<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>7）main.js</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> Vue from <span class="token string">'vue'</span><span class="token function">import</span> App from <span class="token string">'./App.vue'</span><span class="token function">import</span> router from <span class="token string">'./router'</span>Vue.config.productionTip <span class="token operator">=</span> <span class="token boolean">false</span>new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    render: h <span class="token operator">=</span><span class="token operator">></span> h<span class="token punctuation">(</span>App<span class="token punctuation">)</span>,    router, //注册路由器<span class="token punctuation">}</span><span class="token punctuation">)</span>.<span class="token variable">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>8）components/Header/index.vue</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>Header<span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token punctuation">{</span>    name: <span class="token string">'Header'</span>,    data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>9）components/Footer/index.vue</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>Footer<span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token punctuation">{</span>    name: <span class="token string">'Footer'</span>,    data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>10）App.vue</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>Header/<span class="token operator">></span>        <span class="token operator">&lt;</span>router-view<span class="token operator">></span><span class="token operator">&lt;</span>/router-view<span class="token operator">></span>        <span class="token operator">&lt;</span>Footer/<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">import</span> Header from <span class="token string">'./components/Header'</span><span class="token function">import</span> Footer from <span class="token string">'./components/Footer'</span><span class="token function">export</span> default <span class="token punctuation">{</span>    name: <span class="token string">'App'</span>,    components:<span class="token punctuation">{</span>        Header,        Footer    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>11）pulic/css/reset.css</p><pre class="line-numbers language-bash"><code class="language-bash">/* 清除内外边距 */body, h1, h2, h3, h4, h5, h6, hr, p, blockquote,dl, dt, dd, ul, ol, li,pre,fieldset, lengend, button, input, textarea,th, td <span class="token punctuation">{</span>    margin: 0<span class="token punctuation">;</span>    padding: 0<span class="token punctuation">;</span><span class="token punctuation">}</span>/* 设置默认字体 */body,button, input, select, textarea <span class="token punctuation">{</span> /* <span class="token keyword">for</span> ie */    /*font: 12px/1 Tahoma, Helvetica, Arial, <span class="token string">"宋体"</span>, sans-serif<span class="token punctuation">;</span>*/    font: 12px/1.3 <span class="token string">"Microsoft YaHei"</span>,Tahoma, Helvetica, Arial, <span class="token string">"\5b8b\4f53"</span>, sans-serif<span class="token punctuation">;</span> /* 用 ascii 字符表示，使得在任何编码下都无问题 */    color: <span class="token comment" spellcheck="true">#333;</span><span class="token punctuation">}</span>h1 <span class="token punctuation">{</span> font-size: 18px<span class="token punctuation">;</span> /* 18px / 12px <span class="token operator">=</span> 1.5 */ <span class="token punctuation">}</span>h2 <span class="token punctuation">{</span> font-size: 16px<span class="token punctuation">;</span> <span class="token punctuation">}</span>h3 <span class="token punctuation">{</span> font-size: 14px<span class="token punctuation">;</span> <span class="token punctuation">}</span>h4, h5, h6 <span class="token punctuation">{</span> font-size: 100%<span class="token punctuation">;</span> <span class="token punctuation">}</span>address, cite, dfn, em, var, i<span class="token punctuation">{</span> font-style: normal<span class="token punctuation">;</span> <span class="token punctuation">}</span> /* 将斜体扶正 */b, strong<span class="token punctuation">{</span> font-weight: normal<span class="token punctuation">;</span> <span class="token punctuation">}</span> /* 将粗体扶细 */code, kbd, pre, samp, tt <span class="token punctuation">{</span> font-family: <span class="token string">"Courier New"</span>, Courier, monospace<span class="token punctuation">;</span> <span class="token punctuation">}</span> /* 统一等宽字体 */small <span class="token punctuation">{</span> font-size: 12px<span class="token punctuation">;</span> <span class="token punctuation">}</span> /* 小于 12px 的中文很难阅读，让 small 正常化 *//* 重置列表元素 */ul, ol <span class="token punctuation">{</span> list-style: none<span class="token punctuation">;</span> <span class="token punctuation">}</span>/* 重置文本格式元素 */a <span class="token punctuation">{</span> text-decoration: none<span class="token punctuation">;</span> color: <span class="token comment" spellcheck="true">#666;}</span>/* 重置表单元素 */legend <span class="token punctuation">{</span> color: <span class="token comment" spellcheck="true">#000; } /* for ie6 */</span>fieldset, img <span class="token punctuation">{</span> border: none<span class="token punctuation">;</span> <span class="token punctuation">}</span>button, input, select, textarea <span class="token punctuation">{</span>    font-size: 100%<span class="token punctuation">;</span> /* 使得表单元素在 ie 下能继承字体大小 */<span class="token punctuation">}</span>/* 重置表格元素 */table <span class="token punctuation">{</span>    border-collapse: collapse<span class="token punctuation">;</span>    border-spacing: 0<span class="token punctuation">;</span><span class="token punctuation">}</span>/* 重置 hr */hr <span class="token punctuation">{</span>    border: none<span class="token punctuation">;</span>    height: 1px<span class="token punctuation">;</span><span class="token punctuation">}</span>.clearFix::after<span class="token punctuation">{</span>    content:<span class="token string">""</span><span class="token punctuation">;</span>    display: block<span class="token punctuation">;</span>    clear:both<span class="token punctuation">;</span><span class="token punctuation">}</span>/* 让非ie浏览器默认也显示垂直滚动条，防止因滚动条引起的闪烁 */html <span class="token punctuation">{</span> overflow-y: scroll<span class="token punctuation">;</span> <span class="token punctuation">}</span>a:link:hover<span class="token punctuation">{</span>    color <span class="token keyword">:</span> rgb<span class="token punctuation">(</span>79, 76, 212<span class="token punctuation">)</span> <span class="token operator">!</span>important<span class="token punctuation">;</span>    text-decoration: underline<span class="token punctuation">;</span><span class="token punctuation">}</span>/* 清除浮动 */.clearfix::after <span class="token punctuation">{</span>    display: block<span class="token punctuation">;</span>    height: 0<span class="token punctuation">;</span>    content: <span class="token string">""</span><span class="token punctuation">;</span>    clear: both<span class="token punctuation">;</span>    visibility: hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>12）public/index.html</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"/css/reset.css"</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="五、Vue组件化"><a href="#五、Vue组件化" class="headerlink" title="五、Vue组件化"></a>五、Vue组件化</h2><ol><li><p>配置vue组件文件模板</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span> <span class="token string">"Print to vue"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>   <span class="token string">"prefix"</span><span class="token keyword">:</span> <span class="token string">"vue"</span>,   <span class="token string">"body"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token string">"&lt;template>"</span>,    <span class="token string">"  &lt;div>&lt;/div>"</span>,    <span class="token string">"&lt;/template>"</span>,    <span class="token string">""</span>,    <span class="token string">"&lt;script>"</span>,    <span class="token string">"export default {"</span>,    <span class="token string">"  name: '',"</span>,    <span class="token string">"  data () {"</span>,    <span class="token string">"    return {}"</span>,    <span class="token string">"  },"</span>,    <span class="token string">"  created () {},"</span>,    <span class="token string">"  // mounted () {},"</span>,    <span class="token string">"  computed: {},"</span>,    <span class="token string">"  watch: {},"</span>,    <span class="token string">"  methods: {}"</span>,    <span class="token string">"}"</span>,    <span class="token string">"&lt;/script>"</span>,    <span class="token string">""</span>,    <span class="token string">"&lt;style lang=\"less\" scoped>"</span>,    <span class="token string">""</span>,    <span class="token string">"&lt;/style>"</span>,    <span class="token string">""</span>   <span class="token punctuation">]</span>,   <span class="token string">"description"</span><span class="token keyword">:</span> <span class="token string">"快速创建vue单文件组件"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>App.vue</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        App    <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token punctuation">{</span>    name: <span class="token string">'App'</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>main.js</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> Vue from <span class="token string">'vue'</span><span class="token function">import</span> App from <span class="token string">'./App'</span>new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el: <span class="token string">'#app'</span>,    render: h <span class="token operator">=</span><span class="token operator">></span> h<span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>jsconfig.json</p><p>让vscode提示@开头的模块路径引入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span>  <span class="token string">"compilerOptions"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"baseUrl"</span><span class="token keyword">:</span> <span class="token string">"./"</span>,    <span class="token string">"paths"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"@/*"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"src/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"exclude"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span>, <span class="token string">"dist"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="六、Header组件"><a href="#六、Header组件" class="headerlink" title="六、Header组件"></a>六、Header组件</h2><ol><li>说明</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kincar/image@main/sphHeader.png"></p><p>使用声明式路由导航与编程式路由导航</p><p>解决编程式路由导航的一个错误</p><ol start="2"><li><p>Header组件代码</p><ul><li><p>准备静态页面及图片资源</p><pre class="line-numbers language-bash"><code class="language-bash">//components/header/index.vue<span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>router-link to<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>登陆<span class="token operator">&lt;</span>/router-link<span class="token operator">></span>    <span class="token operator">&lt;</span>router-link class<span class="token operator">=</span><span class="token string">"register"</span> to<span class="token operator">=</span><span class="token string">"/register"</span><span class="token operator">></span>免费注册<span class="token operator">&lt;</span>/router-link<span class="token operator">></span>        <span class="token operator">&lt;</span>router-link class<span class="token operator">=</span><span class="token string">"logo"</span> to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./images/logo.png"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span>/router-link<span class="token operator">></span>        <span class="token operator">&lt;</span>form class<span class="token operator">=</span><span class="token string">"searchForm"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"autocomplete"</span> class<span class="token operator">=</span><span class="token string">"input-error input-xxlarge"</span> v-model<span class="token operator">=</span><span class="token string">"keyword"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>button class<span class="token operator">=</span><span class="token string">"sui-btn btn-xlarge btn-danger"</span> type<span class="token operator">=</span><span class="token string">"button"</span> @click<span class="token operator">=</span><span class="token string">"search"</span><span class="token operator">></span>搜索<span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span>/form<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">export</span> default <span class="token punctuation">{</span>        name: <span class="token string">'Header'</span>,        data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                keyword: <span class="token string">''</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        methods:<span class="token punctuation">{</span>            search<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                this.<span class="token variable">$router</span>.push<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>/search/$<span class="token punctuation">{</span>this.keyword<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span>// router/routes.js// 问题：如何实现params参数可传可不传<span class="token punctuation">{</span>    path: <span class="token string">'/search/:keyword?'</span>, //params参数可传可不传    component: Search<span class="token punctuation">}</span>//Search组件代码<span class="token operator">&lt;</span>div<span class="token operator">></span>搜索关键字：<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token variable">$route</span>.params.keyword<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>路由跳转与传参相关问题</p></li></ol><ul><li><p>跳转路由的2中方式：</p><p>声明式：<code>&lt;router-link to=&quot;&quot;&gt;&lt;/router-link&gt;</code></p><p>编程式：<code>this.$router.push()/replace()</code></p></li><li><p>跳转路由携带参数的2种方式：params参数、query参数</p></li><li><p>编程式路由跳转到当前路由（参数不变），会抛出<code>NavigationDuplicated</code>的警告错误。</p><p>解决1：在跳转时指定成功或失败的回调函数，通过catch处理错误；</p><p>解决2：修正Vue原型上的push和replace方法（推荐）</p></li><li><p>如何指定params参数可传可不传？</p><p><code>path:/search/:keyword?</code></p></li><li><p>指定params参数时可不可以用path和params配置的组合？</p><p>不可以用path和params配置的组合，只能用<code>name</code>和params配置的组合；query皮遏制可以与path或name进行组合使用。</p></li><li><p>如果指定name与params配置，但params中数据是一个””，无法跳转，怎么解决？</p><p>解决1：不指定params；</p><p>解决2：指定params参数值为undefined</p></li><li><p>路由组件能不能传递props数据？</p><p>可以：可以将query或params参数映射/转换成props传递个路由组件对象。</p><p>实现：</p><pre class="line-numbers language-bash"><code class="language-bash">props:<span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>    keyword1: route.params.keyword,    keyword2: route.query.keyword<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li><p>解决路由跳转时的<code>NavigationDuplicated</code>错误</p><p>原因：vue-router3.1.0之后，引入了push()的promise语法，如果没有通过参数指定回调函数就会返回一个promise来制定成功/失败的回调，并且内部会判断如果跳转的路径和参数都没有变化，会抛出一个失败的promise。</p><p>解决：</p><p>方案1：在进行跳转时，指定跳转成功的回调函数或catch错误</p><pre class="line-numbers language-bash"><code class="language-bash">//catch<span class="token punctuation">(</span><span class="token punctuation">)</span>处理错误this.<span class="token variable">$router</span>.push<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>/search/$<span class="token punctuation">{</span>this.keyword<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token punctuation">)</span>.catch<span class="token punctuation">((</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>//指定成功的回调函数this.<span class="token variable">$router</span>.push<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>/search/$<span class="token punctuation">{</span>this.keyword<span class="token punctuation">}</span><span class="token variable">`</span></span>,<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>//指定失败的回调函数this.<span class="token variable">$router</span>.push<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>/search/$<span class="token punctuation">{</span>this.keyword<span class="token punctuation">}</span><span class="token variable">`</span></span>, undefined,<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方案2：修正Vue原型上的push和replace方法（推荐）</p><pre class="line-numbers language-bash"><code class="language-bash">// 缓存原型上的push函数const originPush <span class="token operator">=</span> VueRouter.prototype.pushconst originReplace <span class="token operator">=</span> VueRouter.prototype.replace// 给原型对象上的push指定新函数函数VueRouter.prototype.push <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>location, onComplete, onAbort<span class="token punctuation">)</span> <span class="token punctuation">{</span>  // 判断如果没有指定回调函数, 通过call调用源函数并使用catch来处理错误  <span class="token keyword">if</span> <span class="token punctuation">(</span>onComplete<span class="token operator">==</span><span class="token operator">=</span>undefined <span class="token operator">&amp;&amp;</span> onAbort<span class="token operator">==</span><span class="token operator">=</span>undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> originPush.call<span class="token punctuation">(</span>this, location, onComplete, onAbort<span class="token punctuation">)</span>.catch<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> // 如果有指定任意回调函数, 通过call调用源push函数处理    originPush.call<span class="token punctuation">(</span>this, location, onComplete, onAbort<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>VueRouter.prototype.replace <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>location, onComplete, onAbort<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>onComplete<span class="token operator">==</span><span class="token operator">=</span>undefined <span class="token operator">&amp;&amp;</span> onAbort<span class="token operator">==</span><span class="token operator">=</span>undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> originReplace.call<span class="token punctuation">(</span>this, location, onComplete, onAbort<span class="token punctuation">)</span>.catch<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    originReplace.call<span class="token punctuation">(</span>this, location, onComplete, onAbort<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="七、引入less预编译器"><a href="#七、引入less预编译器" class="headerlink" title="七、引入less预编译器"></a>七、引入less预编译器</h2><p>下载依赖包：<code>npm install -D less less-loader@5</code></p><p>组件中使用less：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="八、Footer组件"><a href="#八、Footer组件" class="headerlink" title="八、Footer组件"></a>八、Footer组件</h2><ul><li>效果：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kincar/image@main/20220113230152.png"></p><ul><li><p>准备静态页面及图片资源</p></li><li><p><strong>控制Foot而界面的显示/隐藏</strong></p><p>解决方案：利用路由的meta配置和v-show</p><p>1）router/routes.js</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span>    path: <span class="token string">'/register'</span>,    component: Register,    meta: <span class="token punctuation">{</span> //需要隐藏Footer的路由添加此配置        isHideFooter: <span class="token boolean">true</span>    <span class="token punctuation">}</span>,<span class="token punctuation">}</span>,<span class="token punctuation">{</span>    path: <span class="token string">'/login'</span>,    component: Login,    meta: <span class="token punctuation">{</span>        isHiderFooter: <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）App.vue</p><p><code>&lt;Footer v-show=&quot;!$route.meta.isHideFooter&quot;/&gt;</code></p></li></ul><h2 id="九、Home路由组件"><a href="#九、Home路由组件" class="headerlink" title="九、Home路由组件"></a>九、Home路由组件</h2><ul><li><p>抽取完整的Home静态路由组件</p></li><li><p>从Home组件中抽取子组件（静态）</p><ul><li><p>TypeNav：3级分类导航</p></li><li><p>ListContainer：包含轮播列表的容器</p></li><li><p>TodayRecommend：今日推荐</p></li><li><p>Rank：排行</p></li><li><p>Like：猜你喜欢</p></li><li><p>Floor：楼层</p></li><li><p>Brand：品牌</p><p><img src="https://cdn.jsdelivr.net/gh/kincar/image@main/20220113231632.png"></p></li></ul></li></ul><h2 id="十、后台应用"><a href="#十、后台应用" class="headerlink" title="十、后台应用"></a>十、后台应用</h2><ul><li>说明：</li></ul><ol><li><p>这个项目是一个前后台分离的项目：前台应用与后台应用；</p></li><li><p>  后台应用负责处理前台应用提交的请求，并给前台应用返回json数据；</p></li><li><p>前台应用负责展现数据，与用户交互，与后台应用交互</p></li></ol><ul><li>使用postman工具测试接口<ul><li>postman是用来测试API接口的工具</li><li>postman也是一个活接口文档</li><li>使用步骤：<ul><li>启动===&gt; 选择登陆 ===&gt; cancel ===&gt; 进入主界面；</li><li>输入url/参数进行请求测试；</li><li>注意post请求体参数需要指定为json 格式；</li><li>保存测试接口 ===&gt; 后面可以反复使用。</li></ul></li></ul></li></ul><h2 id="十一、前后台交互ajax"><a href="#十一、前后台交互ajax" class="headerlink" title="十一、前后台交互ajax"></a>十一、前后台交互ajax</h2><ul><li><p>下载依赖包</p><p><code>npm install -S axios nprogress</code></p></li><li><p>封装ajax请求模块</p><ol><li><p>api/ajax.js</p><pre class="line-numbers language-bash"><code class="language-bash">/*对axios进行二次封装1. 配置通用的基础路径和超时；2. 显示请求进度条；3. 成功返回的数据不再是response，而直接是响应体数据response.data<span class="token punctuation">;</span>4. 统一处理请求错误，具体情况也可以选择处理或不处理*/<span class="token function">import</span> axios from <span class="token string">'axios'</span><span class="token function">import</span> nprogress from <span class="token string">'nprogress'</span><span class="token function">import</span> <span class="token string">'nprogress/nprogress.css'</span>//配置不显示右上角的旋转进度条，只显示水平进度条nprogress.configure<span class="token punctuation">(</span><span class="token punctuation">{</span> showSpinner: <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>const <span class="token function">service</span> <span class="token operator">=</span> axios.create<span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL: <span class="token string">'/api'</span>, //基础路径    timeout: 5000 //连接请求超时时间<span class="token punctuation">}</span><span class="token punctuation">)</span>service.interceptors.request.use<span class="token punctuation">((</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    //显示请求中的水平进度条    nprogress.start<span class="token punctuation">(</span><span class="token punctuation">)</span>        //必须返回配置对象    <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">)</span>service.interceptors.response.use<span class="token punctuation">((</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    //隐藏进度条    nprogress.done<span class="token punctuation">(</span><span class="token punctuation">)</span>        //返回响应体数据    <span class="token keyword">return</span> response.data<span class="token punctuation">}</span>,<span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    //隐藏进度条    nprogress.done<span class="token punctuation">(</span><span class="token punctuation">)</span>        //统一处理一下错误    alert<span class="token punctuation">(</span>`请求出错：$<span class="token punctuation">{</span>error.message<span class="token operator">||</span><span class="token string">'未知错误'</span><span class="token punctuation">}</span>`<span class="token punctuation">)</span>        //后面可以选择不处理或处理    <span class="token keyword">return</span> Promise.reject<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">export</span> default <span class="token function">service</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>api/index.js</p><pre class="line-numbers language-bash"><code class="language-bash">/*包含所有接口请求函数的模块*/<span class="token function">import</span> ajax from <span class="token string">'./ajax'</span>//获取商品的三级分类列表<span class="token function">export</span> const reqBaseCategoryList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>ajax.get<span class="token punctuation">(</span><span class="token string">'/product/getBaseCategoryList'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>App.vue</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token punctuation">{</span>reqBaseCategoryList<span class="token punctuation">}</span> from <span class="token string">'@/api'</span>async mounted<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    const result <span class="token operator">=</span> await reqBaseCategoryList<span class="token punctuation">(</span><span class="token punctuation">)</span>    console.log<span class="token punctuation">(</span><span class="token string">'result'</span>, result<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>配置代理</p><p>vue.config.js</p><pre class="line-numbers language-bash"><code class="language-bash">deserver:<span class="token punctuation">{</span>    proxy:<span class="token punctuation">{</span>        <span class="token string">'/api'</span>:<span class="token punctuation">{</span> //支队请求路由以/api开头的请求进行代理转发            target: <span class="token string">'http://182.92.128.115'</span>, //转发的目标url            changeOrigin: <span class="token boolean">true</span> //支持跨域        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="十二、使用vuex管理状态"><a href="#十二、使用vuex管理状态" class="headerlink" title="十二、使用vuex管理状态"></a>十二、使用vuex管理状态</h2><ul><li><p>下载依赖包</p><p><code>npm install -S vuex</code></p></li><li><p>store/moudules/home.js</p><pre class="line-numbers language-bash"><code class="language-bash">/*vuex管理的home模块*/<span class="token function">import</span> <span class="token punctuation">{</span>reqBaseCategoryList<span class="token punctuation">}</span> from <span class="token string">'@/api'</span>const state <span class="token operator">=</span> <span class="token punctuation">{</span>    baseCategoryList: <span class="token punctuation">[</span><span class="token punctuation">]</span>, //所有分类的数组<span class="token punctuation">}</span>const mutations <span class="token operator">=</span> <span class="token punctuation">{</span>    /*    接收保存分类列表    */    RECEIVE_BASE_CATEGORY_LIST<span class="token punctuation">(</span>state,list<span class="token punctuation">)</span><span class="token punctuation">{</span>        state.baseCategoryList <span class="token operator">=</span> list    <span class="token punctuation">}</span><span class="token punctuation">}</span>const actions <span class="token operator">=</span> <span class="token punctuation">{</span>    /*    异步获取商品三级分类列表    */    async getBaseCategoryList<span class="token punctuation">(</span><span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        const result <span class="token operator">=</span> await reqBaseCategoryList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>result.code <span class="token operator">==</span><span class="token operator">=</span> 200<span class="token punctuation">)</span><span class="token punctuation">{</span>            commit<span class="token punctuation">(</span><span class="token string">'RECEIVE_BASE_CATEGORYLIST'</span>, result.data<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>const getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">export</span> default <span class="token punctuation">{</span>    state,    mutations,    actions,    getters<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>store/modules/index.js</p><pre class="line-numbers language-bash"><code class="language-bash">/*手机所有vuex管理的模块*/<span class="token function">import</span> home from <span class="token string">'./home'</span>//向外暴露所有vuex管理的模块的对象<span class="token function">export</span> default <span class="token punctuation">{</span>    home,<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>store/index.js</p><pre class="line-numbers language-bash"><code class="language-bash">/*vuex最核心的管理对象store*/<span class="token function">import</span> Vue from <span class="token string">'vue'</span><span class="token function">import</span> Vuex from <span class="token string">'vuex'</span><span class="token function">import</span> modules from <span class="token string">'./modules'</span>//声明使用vuex插件Vue.use<span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>//向外暴露store对象<span class="token function">export</span> default new Vuex.Store<span class="token punctuation">(</span><span class="token punctuation">{</span>    modules, //配置store的所有模块<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注册store</p><p>main.js</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> store from <span class="token string">'./store'</span>new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    store, //注册vuex的store对象 <span class="token operator">==</span><span class="token operator">></span> 所有组件对象都有一个<span class="token variable">$store</span>属性<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="十三、异步显示三级分类列表TypeNav"><a href="#十三、异步显示三级分类列表TypeNav" class="headerlink" title="十三、异步显示三级分类列表TypeNav"></a>十三、异步显示三级分类列表TypeNav</h2><ul><li><p>重难点说明</p><ul><li>组件与vuex交互</li><li>事件控制二三级分类列表的显示与隐藏</li><li>优化高频事件触发处理：利用lodash进行函数节流处理</li><li>优化减小打包文件：对lodash库实现按需引入</li><li>解决快速移出后可能显示第一个分类的子分类列表的bug</li><li>优化减少组件对象数量：使用编程式导航代替声明式导航</li><li>优化事件处理效率：利用事件委托</li><li>利用标签自定义属性携带动态数据</li><li>控制一级列表的显示与隐藏</li><li>一级列表显示与隐藏的过渡效果</li><li>优化请求执行的位置，减少请求次数</li><li>合并分类query参数与搜索的关键字params参数</li></ul></li><li><p>代码实现</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"type-nav"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"container"</span> @mouseenter<span class="token operator">=</span><span class="token string">"isShow=true"</span> @mouseleave<span class="token operator">=</span><span class="token string">"hideCategorys"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h2 class<span class="token operator">=</span><span class="token string">"all"</span><span class="token operator">></span>全部商品分类<span class="token operator">&lt;</span>/h2<span class="token operator">></span>      <span class="token operator">&lt;</span>nav class<span class="token operator">=</span><span class="token string">"nav"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"###"</span><span class="token operator">></span>服装城<span class="token operator">&lt;</span>/a<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"###"</span><span class="token operator">></span>美妆馆<span class="token operator">&lt;</span>/a<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"###"</span><span class="token operator">></span>尚品汇超市<span class="token operator">&lt;</span>/a<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"###"</span><span class="token operator">></span>全球购<span class="token operator">&lt;</span>/a<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"###"</span><span class="token operator">></span>闪购<span class="token operator">&lt;</span>/a<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"###"</span><span class="token operator">></span>团购<span class="token operator">&lt;</span>/a<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"###"</span><span class="token operator">></span>有趣<span class="token operator">&lt;</span>/a<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"###"</span><span class="token operator">></span>秒杀<span class="token operator">&lt;</span>/a<span class="token operator">></span>      <span class="token operator">&lt;</span>/nav<span class="token operator">></span>      <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"sort"</span> v-if<span class="token operator">=</span><span class="token string">"isShow"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"all-sort-list2"</span> @click<span class="token operator">=</span><span class="token string">"toSearch"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"item"</span> v-for<span class="token operator">=</span><span class="token string">"(c1, index) in baseCategoryList"</span> :key<span class="token operator">=</span><span class="token string">"c1.categoryId"</span>            :class<span class="token operator">=</span><span class="token string">"{'item-on': index===currentIndex}"</span> @mouseenter<span class="token operator">=</span><span class="token string">"showCategorys(index)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>h3<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">&lt;</span>router-link :to<span class="token operator">=</span><span class="token string">"{path: '/search', query:{categoryName: c1.categoryName}}"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>c1.categoryName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/router-link<span class="token operator">></span> --<span class="token operator">></span>              <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:"</span>                 :data-categoryName<span class="token operator">=</span><span class="token string">"c1.categoryName"</span>                 :data-category1Id<span class="token operator">=</span><span class="token string">"c1.categoryId"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>c1.categoryName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/a<span class="token operator">></span>            <span class="token operator">&lt;</span>/h3<span class="token operator">></span>            <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"item-list clearfix"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"subitem"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>dl class<span class="token operator">=</span><span class="token string">"fore"</span> v-for<span class="token operator">=</span><span class="token string">"(c2, index) in c1.categoryChild"</span> :key<span class="token operator">=</span><span class="token string">"c2.categoryId"</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>dt<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">&lt;</span>router-link :to<span class="token operator">=</span><span class="token string">"{path: '/search', query:{categoryName: c2.categoryName}}"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>c2.categoryName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/router-link<span class="token operator">></span> --<span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:"</span>                       :data-categoryName<span class="token operator">=</span><span class="token string">"c2.categoryName"</span>                      :data-category2Id<span class="token operator">=</span><span class="token string">"c2.categoryId"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>c2.categoryName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/a<span class="token operator">></span>                  <span class="token operator">&lt;</span>/dt<span class="token operator">></span>                  <span class="token operator">&lt;</span>dd<span class="token operator">></span>                    <span class="token operator">&lt;</span>em v-for<span class="token operator">=</span><span class="token string">"(c3, index) in c2.categoryChild"</span> :key<span class="token operator">=</span><span class="token string">"c3.categoryId"</span><span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">&lt;</span>router-link :to<span class="token operator">=</span><span class="token string">"{path: '/search', query:{categoryName: c3.categoryName}}"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>c3.categoryName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/router-link<span class="token operator">></span> --<span class="token operator">></span>                      <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:"</span>                         :data-categoryName<span class="token operator">=</span><span class="token string">"c3.categoryName"</span>                        :data-category3Id<span class="token operator">=</span><span class="token string">"c3.categoryId"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>c3.categoryName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/a<span class="token operator">></span>                    <span class="token operator">&lt;</span>/em<span class="token operator">></span>                  <span class="token operator">&lt;</span>/dd<span class="token operator">></span>                <span class="token operator">&lt;</span>/dl<span class="token operator">></span>              <span class="token operator">&lt;</span>/div<span class="token operator">></span>            <span class="token operator">&lt;</span>/div<span class="token operator">></span>          <span class="token operator">&lt;</span>/div<span class="token operator">></span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">}</span> from <span class="token string">'vuex'</span>    // <span class="token function">import</span> _ from <span class="token string">'lodash'</span>    <span class="token function">import</span> throttle from <span class="token string">'loadash/throttle'</span>    <span class="token function">export</span> default <span class="token punctuation">{</span>        name: <span class="token string">'TypeNav'</span>,        data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                currentIndex: -1, //当前一级分类的下标                isShow: false, //是否显示一级列表            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,                mounted<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            //如果请求的路径是根路径则显示一级分类列表            this.isShow <span class="token operator">=</span> this.<span class="token variable">$route</span>.path <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'/'</span>,                        //异步获取所有分类列表数据            //this.<span class="token variable">$store</span>.dispatch<span class="token punctuation">(</span><span class="token string">'getBaseCategoryList'</span><span class="token punctuation">)</span> //在App组件中执行，减少请求的次数        <span class="token punctuation">}</span>,                computed:<span class="token punctuation">{</span>            //从vuex管理的state中读取数据到当前组件            <span class="token punctuation">..</span>.mapSate<span class="token punctuation">(</span><span class="token punctuation">{</span>                // 读取home模块的所有分类数组                baseCategoryList: state <span class="token operator">=</span><span class="token operator">></span> state.home.baseCategoryList            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>,                methods:<span class="token punctuation">{</span>            //显示当前分类的下级分类列表（不做节流处理）            /*            showCategorys<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>                //console.log<span class="token punctuation">(</span><span class="token string">'showCategorys'</span>,index<span class="token punctuation">)</span>                this.currentIndex <span class="token operator">=</span> index            <span class="token punctuation">}</span>            */                        //显示当前分类的下级分类列表（做节流处理）            //showCategorys: _.throttle<span class="token punctuation">(</span>function<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>            showCategorys: throttle<span class="token punctuation">(</span>function<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>                //console.log<span class="token punctuation">(</span><span class="token string">'showCategorys'</span>, index<span class="token punctuation">)</span>                this.currentIndex <span class="token operator">=</span> index            <span class="token punctuation">}</span>,200<span class="token punctuation">)</span>, //间隔时间200ms                        //隐藏显示的2/3级分类列表            hideCategorys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                this.currentIndex <span class="token operator">=</span> -1                //如果当前不是home就隐藏一级分类列表                if<span class="token punctuation">(</span>this.<span class="token variable">$route</span>.path <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    this.isShow <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>,                        toSearch<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                //得到事件源标签上的自定义属性                const <span class="token punctuation">{</span>categoryname, category1id, category2id, category3id<span class="token punctuation">}</span> <span class="token operator">=</span> event.target.dataset                // 如果有分类名称，说明点击的是某个分类项                if<span class="token punctuation">(</span>categoryname<span class="token punctuation">)</span><span class="token punctuation">{</span>                    //准备query参数                    const query <span class="token operator">=</span> <span class="token punctuation">{</span>categoryName:categoryname<span class="token punctuation">}</span>                    if<span class="token punctuation">(</span>category1id<span class="token punctuation">)</span><span class="token punctuation">{</span>                        query.category1Id <span class="token operator">=</span> category1id                    <span class="token punctuation">}</span>else if<span class="token punctuation">(</span>category2id<span class="token punctuation">)</span><span class="token punctuation">{</span>                        query.category2Id <span class="token operator">=</span> category2id                    <span class="token punctuation">}</span>else if<span class="token punctuation">(</span>category3id<span class="token punctuation">)</span><span class="token punctuation">{</span>                        query.category3Id <span class="token operator">=</span> category3id                    <span class="token punctuation">}</span>                    //跳转到搜索路由，携带准备的query参数                    this.<span class="token variable">$router</span>.push<span class="token punctuation">(</span><span class="token punctuation">{</span>path:<span class="token string">'/search'</span>,query<span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="十四、Mock-模拟数据接口"><a href="#十四、Mock-模拟数据接口" class="headerlink" title="十四、Mock/模拟数据接口"></a>十四、Mock/模拟数据接口</h2><ul><li><p>下载依赖包</p><p><code>npm install -S mockjs</code></p></li><li><p>Web应用前后端（台）分离：</p><ol><li>后台向前台提供API接口，只负责数据的提供和计算，而完全不处理展现；</li><li>前后台通过Http(Ajax)请求获取数据，在浏览器端动态构建界面显示数据。</li></ol></li><li><p>设计JSON数据结构</p><ul><li><p>理解JSON数据结构</p><ul><li>结构：名称，数据类型</li><li>value</li><li>value可以变，但结构不能变</li></ul></li><li><p>编写模拟JSON数据：</p><ul><li><p>首页广澳轮播数据：src/mock/banners.json</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token keyword">:</span><span class="token string">"1"</span>,        <span class="token string">"imgUrl"</span><span class="token keyword">:</span><span class="token string">"/images/banner1.jpg"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token keyword">:</span><span class="token string">"2"</span>,        <span class="token string">"imgUrl"</span><span class="token keyword">:</span><span class="token string">"/images/banner2.jpg"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token keyword">:</span><span class="token string">"3"</span>,        <span class="token string">"imgUrl"</span><span class="token keyword">:</span><span class="token string">"/images/banner3.jpg"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token keyword">:</span><span class="token string">"4"</span>,        <span class="token string">"imgUrl"</span><span class="token keyword">:</span><span class="token string">"/images/banner4.jpg"</span>    <span class="token punctuation">}</span>,<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>首页楼层数据：src/mock/floors.json</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token keyword">:</span> <span class="token string">"001"</span>,        <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"家用电器"</span>,        <span class="token string">"keywords"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"节能补贴"</span>, <span class="token string">"4K电视"</span>, <span class="token string">"空气净化器"</span>, <span class="token string">"IH电饭煲"</span>, <span class="token string">"滚筒洗衣机"</span>, <span class="token string">"电热水器"</span><span class="token punctuation">]</span>,        <span class="token string">"imgUrl"</span><span class="token keyword">:</span> <span class="token string">"/images/floor-1-1.png"</span>,        <span class="token string">"navList"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"热门"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"大家电"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"生活电器"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"厨房电器"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"应季电器"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"空气/净水"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"高端电器"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>,        <span class="token string">"carouselList"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                <span class="token string">"id"</span><span class="token keyword">:</span> <span class="token string">"0011"</span>,                <span class="token string">"imgUrl"</span><span class="token keyword">:</span> <span class="token string">"/images/floor-1-b01.png"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"id"</span><span class="token keyword">:</span> <span class="token string">"0012"</span>,                <span class="token string">"imgUrl"</span><span class="token keyword">:</span> <span class="token string">"/images/floor-1-b02.png"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"id"</span><span class="token keyword">:</span> <span class="token string">"0013"</span>,                <span class="token string">"imgUrl"</span><span class="token keyword">:</span> <span class="token string">"/images/floor-1-b03.png"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>,        <span class="token string">"recommendList"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"/images/floor-1-2.png"</span>,            <span class="token string">"/images/floor-1-3.png"</span>,            <span class="token string">"/images/floor-1-5.png"</span>,            <span class="token string">"/images/floor-1-6.png"</span>        <span class="token punctuation">]</span>,        <span class="token string">"bigImg"</span><span class="token keyword">:</span> <span class="token string">"/images/floor-1-4.png"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token keyword">:</span> <span class="token string">"002"</span>,        <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"手机通讯"</span>,        <span class="token string">"keywords"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"节能补贴2"</span>, <span class="token string">"4K电视2"</span>, <span class="token string">"空气净化器2"</span>, <span class="token string">"IH电饭煲2"</span>, <span class="token string">"滚筒洗衣机2"</span>, <span class="token string">"电热水器2"</span><span class="token punctuation">]</span>,        <span class="token string">"imgUrl"</span><span class="token keyword">:</span> <span class="token string">"/images/floor-1-1.png"</span>,        <span class="token string">"navList"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"热门2"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"大家电2"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"生活电器2"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"厨房电器2"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"应季电器2"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"空气/净水2"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"#"</span>,                <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"高端电器2"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>,        <span class="token string">"carouselList"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                <span class="token string">"id"</span><span class="token keyword">:</span> <span class="token string">"0011"</span>,                <span class="token string">"imgUrl"</span><span class="token keyword">:</span> <span class="token string">"/images/floor-1-b01.png"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"id"</span><span class="token keyword">:</span> <span class="token string">"0012"</span>,                <span class="token string">"imgUrl"</span><span class="token keyword">:</span> <span class="token string">"/images/floor-1-b02.png"</span>            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                <span class="token string">"id"</span><span class="token keyword">:</span> <span class="token string">"0013"</span>,                <span class="token string">"imgUrl"</span><span class="token keyword">:</span> <span class="token string">"/images/floor-1-b03.png"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>,        <span class="token string">"recommendList"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"/images/floor-1-2.png"</span>,            <span class="token string">"/images/floor-1-3.png"</span>,            <span class="token string">"/images/floor-1-5.png"</span>,            <span class="token string">"/images/floor-1-6.png"</span>        <span class="token punctuation">]</span>,        <span class="token string">"bigImg"</span><span class="token keyword">:</span> <span class="token string">"/images/floor-1-4.png"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>利用mockjs提供模拟数据</p><ul><li><p>mockjs:用来拦截ajax请求，生成随机数据返回</p></li><li><p>使用（mock/mockServer.js)</p><pre class="line-numbers language-bash"><code class="language-bash">/*利用mockjs来mock数据接口*/<span class="token function">import</span> Mock from <span class="token string">'mockjs'</span><span class="token function">import</span> banners from <span class="token string">'./banner.json'</span><span class="token function">import</span> floors from <span class="token string">'./floors.json'</span>//提供广告轮播数据的接口Mock.mock<span class="token punctuation">(</span><span class="token string">'/mock/banners'</span>,<span class="token punctuation">{</span>    code: 200,    data: banners<span class="token punctuation">}</span><span class="token punctuation">)</span>//提供所有楼层数据的接口Mock.mock<span class="token punctuation">(</span><span class="token string">'/mock/floors'</span>,<span class="token punctuation">{</span>    code: 200,    data: floors<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>api/ajaxMock.js</p><pre class="line-numbers language-bash"><code class="language-bash">/*专门请求mock接口的axios封装*/<span class="token function">import</span> axios from <span class="token string">'axios'</span>const  mockAjax <span class="token operator">=</span> axios.create<span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL: <span class="token string">'/mock'</span>, //路径前缀    timeout: 5000 //请求超时时间<span class="token punctuation">}</span><span class="token punctuation">)</span>mockAjax.interceptors.request.use<span class="token punctuation">((</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">)</span>mockAjax.interceptors.request.use<span class="token punctuation">((</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> response.data<span class="token punctuation">}</span>,<span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Promise.reject<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">export</span> default mockAjax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>api/index.js</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> mockAjax from <span class="token string">'./mockAjax'</span>//获取广告轮播列表<span class="token function">export</span> const reqBanners <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> mockAjax.get<span class="token punctuation">(</span><span class="token string">'/banners'</span><span class="token punctuation">)</span>//获取首页楼层列表<span class="token function">export</span> const reqFloors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> mockAjax.get<span class="token punctuation">(</span><span class="token string">'/floors'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>vuex</p><p>store/modules/home.js</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token punctuation">{</span>reqBaseCategoryList,reqBanners,reqFloors<span class="token punctuation">}</span> from <span class="token string">'@/api'</span>const state <span class="token operator">=</span> <span class="token punctuation">{</span>    baseCategoryList: <span class="token punctuation">[</span><span class="token punctuation">]</span>, //所有分类的数组    banners: <span class="token punctuation">[</span><span class="token punctuation">]</span>, //广告位轮播数据的数组    floors: <span class="token punctuation">[</span><span class="token punctuation">]</span>, //所有楼层数据的数组<span class="token punctuation">}</span>const mutations <span class="token operator">=</span> <span class="token punctuation">{</span>    //接收分类列表    RECEIVE_BASE_CATEGORY_LIST<span class="token punctuation">(</span>state, list<span class="token punctuation">)</span><span class="token punctuation">{</span>        state.baseCategoryList <span class="token operator">=</span> list.slice<span class="token punctuation">(</span>0, list.length-2<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    //接收广告轮播列表    RECEIVE_BANNERS<span class="token punctuation">(</span>state, banners<span class="token punctuation">)</span><span class="token punctuation">{</span>        state.banners <span class="token operator">=</span> banners    <span class="token punctuation">}</span>    //接收楼层列表    REVEIVE_FLOORS<span class="token punctuation">(</span>state, floors<span class="token punctuation">)</span><span class="token punctuation">{</span>        state.floors <span class="token operator">=</span> floors    <span class="token punctuation">}</span><span class="token punctuation">}</span>const actions <span class="token operator">=</span> <span class="token punctuation">{</span>    //异步获取首页所有分类    async getBaseCategoryList<span class="token punctuation">(</span><span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        const result <span class="token operator">=</span> await reqBaseCategoryList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>result.code <span class="token operator">==</span><span class="token operator">=</span> 200<span class="token punctuation">)</span><span class="token punctuation">{</span>            commit<span class="token punctuation">(</span><span class="token string">'RECEIVE_BASE_CATEGORY_LIST'</span>, result.data<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        //异步获取广告位轮播数据    async getBanners<span class="token punctuation">(</span><span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        const result <span class="token operator">=</span> await reqBanners<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>result.code <span class="token operator">==</span><span class="token operator">=</span> 200<span class="token punctuation">)</span><span class="token punctuation">{</span>            commit<span class="token punctuation">(</span><span class="token string">'RECEIVE_BANNERS'</span>, result.data<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        //异步获取所有楼层数据    async getFloors<span class="token punctuation">(</span><span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        const result <span class="token operator">=</span> await reqFloors<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>result.code <span class="token operator">==</span><span class="token operator">=</span> 200<span class="token punctuation">)</span><span class="token punctuation">{</span>            commit<span class="token punctuation">(</span><span class="token string">'RECEIVE_FLOORS'</span>, result.data<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>const getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">export</span> default <span class="token punctuation">{</span>    state,    actions,    mutations,    getters<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h2 id="十五、利用Mock接口实现动态的Home"><a href="#十五、利用Mock接口实现动态的Home" class="headerlink" title="十五、利用Mock接口实现动态的Home"></a>十五、利用Mock接口实现动态的Home</h2><ul><li><p>重难点说明</p><ul><li>使用swiper实现静态页面轮播</li><li>解决多个swiper冲突的问题</li><li>解决swiper动态页面轮播的bug</li><li>定义可复用的轮播组件</li><li>解决Floor组件中轮播有问题的bug</li></ul></li><li><p>下载依赖包</p><p><code>npm install -S swiper</code></p></li><li><p>通用轮播组件component/Carousel</p><p>注意需要在main.js中进行全局注册</p><pre class="line-numbers language-bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​    </p><blockquote><p>项目运行，浏览器自动打开</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">package.json    <span class="token string">"scripts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"serve"</span><span class="token keyword">:</span> <span class="token string">"vue-cli-service serve --open"</span>,    <span class="token string">"build"</span><span class="token keyword">:</span> <span class="token string">"vue-cli-service build"</span>,    <span class="token string">"lint"</span><span class="token keyword">:</span> <span class="token string">"vue-cli-service lint"</span>    <span class="token punctuation">}</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关闭eslint校验工具（不关闭会有各种规范，不按照规范就会报错）</p></blockquote><ul><li><p>根目录下创建<code>vue.config.js</code>进行配置</p><pre class="line-numbers language-bash"><code class="language-bash">module.exports <span class="token operator">=</span> <span class="token punctuation">{</span>  //关闭eslint  lintOnSave: <span class="token boolean">false</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>src文件夹配置别名，创建jsconfig.json，用<code>@</code>代替<code>src</code>，<code>exlude</code>表示不可以使用该别名的文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token punctuation">{</span>    <span class="token string">"compilerOptions"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"baseUrl"</span><span class="token keyword">:</span> <span class="token string">"./"</span>,            <span class="token string">"paths"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"@/*"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"src/*"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token string">"exclude"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token string">"node_modules"</span>,        <span class="token string">"dist"</span>    <span class="token punctuation">]</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件页面样式"><a href="#组件页面样式" class="headerlink" title="组件页面样式"></a>组件页面样式</h3><p>组件页面的样式使用的是less样式，浏览器不识别该样式，需要下载相关依赖</p><p><code>npm install --save less less-loader@5</code></p><p>如果想让组件识别less样式，则在组件中设置</p><p><code>&lt;style scoped lang=&quot;less&quot;&gt;</code></p><h3 id="清除vue页面默认的样式"><a href="#清除vue页面默认的样式" class="headerlink" title="清除vue页面默认的样式"></a>清除vue页面默认的样式</h3><p>vue是单页面开发，我们只需要修改public下的index.html文件</p><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;reset.css&quot;&gt;</code></p><h3 id="pages文件夹"><a href="#pages文件夹" class="headerlink" title="pages文件夹"></a>pages文件夹</h3><p>创建pages文件夹，并创建路由组件</p><p>创建router文件夹，并创建index.js进行路由配置，最终在main.js中引入注册</p><blockquote><p>路由组件和非路由组件区别：</p><ul><li>非路由组件放在components中，路由组件放在pages或views中；</li><li>非路由组件通过标签使用，路由组件通过路由使用；</li><li>在main.js注册完路由，所有的路由和非路由组件身上都会拥有<code>$router</code>和<code>$route</code>属性</li><li>$router：一般进行编程式导航进行路由跳转</li><li>$route：一般获取路由信息（name、path、params等）</li></ul></blockquote><p>路由跳转的方式：</p><ul><li>声明式导航：router-link标签，可以把router-link理解成一个a标签；<code>&lt;router-link to=&quot;&quot;</code></li><li>编程式导航：声明式导航能做的编程式导航都能做，而且可以处理一些业务。<code>this.$router.push()/replace()</code></li></ul><h3 id="footer组件显示与隐藏"><a href="#footer组件显示与隐藏" class="headerlink" title="footer组件显示与隐藏"></a>footer组件显示与隐藏</h3><ul><li><p>footer在登录注册页面是不存在的，所以要隐藏，v-if或v-show</p></li><li><p>这里使用v-show，v-if会频繁地操作dom元素消耗性能，v-show只是通过样式将元素显示或隐藏</p></li><li><p>配置路由的时候，可以给路由配置元信息meta，在路由元信息中show属性，用来给v-show赋值，判断是否显示footer组件</p><pre class="line-numbers language-bash"><code class="language-bash">//router/routes.js  path: <span class="token string">'/register'</span>,  component: Register,  meta: <span class="token punctuation">{</span> // 需要隐藏footer的路由添加此配置    isHideFooter: <span class="token boolean">true</span>  <span class="token punctuation">}</span>  // App.vue<span class="token operator">&lt;</span>Footer v-show<span class="token operator">=</span><span class="token string">"!<span class="token variable">$route</span>.meta.isHideFooter"</span>/<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><ol><li><p>query、params</p><ul><li><p>query、params两个属性都可以传参</p><ul><li><p>query参数：不属于路径当中的一部分，类似于get请求，地址栏表现为/search?k1=v1&amp;k2=v2。query参数对应的路由信息<code>path:&quot;/search&quot;</code>；</p></li><li><p>params参数：属于路径当中的一部分，需要注意，在配置路由的时候，需要<strong>占位</strong>，地址栏表现为/search/v1/v2。params参数对应的路由信息要修改为<code>path:&quot;/search/:keyword&quot;</code>，这里的/:keyword就是一个params参数的占位符；</p></li></ul></li><li><p>params传参问题</p><ul><li><p>如何指定params参数可传可不传？</p><p><code>path: &#39;/search/:keyword?&#39;</code>，?表示该参数可传可不传。</p></li><li><p>params参数既然可传可不传，name如果传递的是空串，无法跳转，怎么解决？</p><p>可加入<code>||undefined</code>，当我们传递的参数为空串“”时，地址栏url也可以保持正常。</p><pre class="line-numbers language-bash"><code class="language-bash">this.<span class="token variable">$router</span>.push<span class="token punctuation">(</span><span class="token punctuation">{</span>name:<span class="token string">"Search"</span>,query:<span class="token punctuation">{</span>keyword:this.keyword<span class="token punctuation">}</span>,params:<span class="token punctuation">{</span>keyword:<span class="token string">''</span><span class="token operator">||</span>undefined<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>路由组件能不能传递props数据？</p><p>可以，<code>props: (route)=&gt;(&#123;keyword1:route.params.keyword, keyword2: route.query.keyword &#125;)</code></p></li></ul></li></ul></li><li><p>传参方法</p><ul><li><p>字符串形式</p><p><code>this.$router.push(&quot;/search/&quot;+this.params传参+&quot;?k=&quot;+this.query传参)</code></p></li><li><p>模板字符串</p><p><code>this.$router.push(&quot;/search/$&#123;this.params传参&#125;?k=$&#123;this.query传参&#125;&quot;)</code></p><p><a href="http://localhost:8080/#/search/key1?keyword=key2">http://localhost:8080/#/search/key1?keyword=key2</a> 中key1为params的值，key2为query传递的值</p></li><li><p><strong>对象（常用）</strong></p><p><code>this.$router.push(&#123;name:&quot;路由名字&quot;, params:&#123;传参&#125;, query:&#123;传参&#125;&#125;)</code></p><p>以对象传参时，如果我们使用了params，只能使用name，不能使用path；如果只是用query传参，可以使用path</p></li></ul></li></ol><h3 id="多次执行相同的push问题"><a href="#多次执行相同的push问题" class="headerlink" title="多次执行相同的push问题"></a>多次执行相同的push问题</h3><p>使用<code>this.$router.push(&#123;name:&quot;Search&quot;, params:&#123;keyword:&quot;...&quot;||undefined&#125;&#125;)</code>时，多次执行，控制台出现NavigationDuplicated警告：</p><p><img src="https://img-blog.csdnimg.cn/308f41adccfe4268a6a2e0b4b2d2cfd0.png" alt="警告"></p><p> 解决办法(router.js中加入下列代码，修正Vue原型上的push和replace方法)：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">let</span> originPush <span class="token operator">=</span> VueRouter.prototype.push<span class="token punctuation">;</span><span class="token keyword">let</span> originReplace <span class="token operator">=</span> VueRouter.prototype.replace<span class="token punctuation">;</span>VueRouter.prototype.push <span class="token operator">=</span> function<span class="token punctuation">(</span>location, resolve, reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve <span class="token operator">&amp;&amp;</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    originPush.call<span class="token punctuation">(</span>this, location, resolve, reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    originPush.call<span class="token punctuation">(</span>      this,      location,      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>VueRouter.prototype.replace <span class="token operator">=</span> function<span class="token punctuation">(</span>location, resolve, reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve <span class="token operator">&amp;&amp;</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    originReplace.call<span class="token punctuation">(</span>this, location, resolve, reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    originReplace.call<span class="token punctuation">(</span>      this,      location,      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义全局组件"><a href="#定义全局组件" class="headerlink" title="定义全局组件"></a>定义全局组件</h3><p>三级联动组件是全局组件，全局的配置都需要在main.js中配置</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> TypeNav from <span class="token string">'@/pages/Home/TypeNav'</span><span class="token punctuation">;</span>Vue.component<span class="token punctuation">(</span>TypeNav.name,TypeNav<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来，<code>&lt;TypeNav/&gt;</code>就可以在任意页面中使用了。</p><h3 id="axios二次封装"><a href="#axios二次封装" class="headerlink" title="axios二次封装"></a>axios二次封装</h3><p>在src目录下，创建api文件夹，创建request.js文件。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> axios from <span class="token string">"axios"</span><span class="token punctuation">;</span>//1、对axios二次封装const requests <span class="token operator">=</span> axios.create<span class="token punctuation">(</span><span class="token punctuation">{</span>    //基础路径，requests发出的请求在端口号后面会跟改baseURl    baseURL:<span class="token string">'/api'</span>,    timeout: 5000,<span class="token punctuation">}</span><span class="token punctuation">)</span>//2、配置请求拦截器requests.interceptors.request.use<span class="token punctuation">(</span>config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    //config内主要是对请求头Header配置    //比如添加token        <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>//3、配置响应拦截器requests.interceptors.response.use<span class="token punctuation">((</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    //成功的回调函数    <span class="token keyword">return</span>  res.data<span class="token punctuation">;</span><span class="token punctuation">}</span>,<span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    //失败的回调函数    console.log<span class="token punctuation">(</span><span class="token string">"响应失败"</span>+error<span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise.reject<span class="token punctuation">(</span>new Error<span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">))</span><span class="token punctuation">}</span><span class="token punctuation">)</span>//4、对外暴露<span class="token function">export</span> default requests<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前端通过代理解决跨域问题"><a href="#前端通过代理解决跨域问题" class="headerlink" title="前端通过代理解决跨域问题"></a>前端通过代理解决跨域问题</h3><p>在根目录下的vue.config.js中配置，proxy可通过代理解决跨域问题。</p><p>在封装axios时设置了baseURL为/api，所有的请求都会携带/api。要保证baseURL和这里的代理映射相同，此处都为’/api’</p><pre class="line-numbers language-bash"><code class="language-bash">module.exports <span class="token operator">=</span> <span class="token punctuation">{</span>    //关闭eslint    lintOnSave: false,    devServer: <span class="token punctuation">{</span>        // <span class="token boolean">true</span> 则热更新，false 则手动刷新，默认值为 <span class="token boolean">true</span>        inline: false,        //代理服务器解决跨域        proxy: <span class="token punctuation">{</span>            //会把请求路径中的/api换为后面的代理服务器            <span class="token string">'/api'</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                //提供数据的服务器地址                target: <span class="token string">'http://39.98.123.211'</span>,            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求接口统一封装"><a href="#请求接口统一封装" class="headerlink" title="请求接口统一封装"></a>请求接口统一封装</h3><p>在文件夹api中创建index.js文件，用于封装所有请求。</p><p><strong>将每一个请求封装为一个函数，并暴露出去，组件只需要调用相应函数即可，这样当我们接口比较多时，如果需要修改，只需要修改该文件即可。</strong></p><p>如下所示：</p><pre class="line-numbers language-bash"><code class="language-bash">//当前模块，API进行统一管理，即对请求接口统一管理<span class="token function">import</span> requests from <span class="token string">"@/api/request"</span><span class="token punctuation">;</span>//首页三级分类接口<span class="token function">export</span> const reqGetCategoryList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>requests.get<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>/product/getBaseCategoryList<span class="token variable">`</span></span><span class="token punctuation">)</span><span class="token function">export</span> const reqCateGoryList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  requests<span class="token punctuation">(</span><span class="token punctuation">{</span>        url: <span class="token string">'/product/getBaseCategoryList'</span>,        method: <span class="token string">'GET'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">export</span> const reqGoodsInfo <span class="token operator">=</span> <span class="token punctuation">(</span>skuId<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> requests<span class="token punctuation">(</span><span class="token punctuation">{</span>    url:<span class="token variable"><span class="token variable">`</span>/item/$<span class="token punctuation">{</span>skuId<span class="token punctuation">}</span><span class="token variable">`</span></span>,    method:<span class="token string">'get'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">export</span> const reqGetSearchInfo <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>requests<span class="token punctuation">(</span><span class="token punctuation">{</span>    url:<span class="token string">'/list'</span>,    method:<span class="token string">'post'</span>,    data:params<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">export</span> const reqAddOrUpdateShopCart <span class="token operator">=</span> <span class="token punctuation">(</span>skuId,skuNum<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>requests<span class="token punctuation">(</span><span class="token punctuation">{</span>    url:<span class="token variable"><span class="token variable">`</span>/cart/addToCart/$<span class="token punctuation">{</span>skuId<span class="token punctuation">}</span>/$<span class="token punctuation">{</span>skuNum<span class="token punctuation">}</span><span class="token variable">`</span></span>,    method:<span class="token string">'post'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当组件想要使用相关请求时，只需要导入相关函数即可：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token punctuation">{</span>reqCateGoryList<span class="token punctuation">}</span> from <span class="token string">'./api'</span>//发起请求reqCateGoryList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="nprogress进度条插件"><a href="#nprogress进度条插件" class="headerlink" title="nprogress进度条插件"></a>nprogress进度条插件</h3><p>打开一个页面，往往会伴随一些请求，并且会在页面上方出现进度条。原理：发起请求，开启进度条；在请求成功后关闭进度条。所以只需要在request.js中进行配置。</p><p><img src="https://img-blog.csdnimg.cn/f0df5bccfaee4274b45755b52bf40b60.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5q-b5q-b6Jmr5ZGc5ZGc,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>对应的request.js中设置</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> axios from <span class="token string">"axios"</span><span class="token punctuation">;</span>//引入进度条<span class="token function">import</span> nprogress from <span class="token string">'nprogress'</span><span class="token punctuation">;</span>//引入进度条样式<span class="token function">import</span> <span class="token string">"nprogress/nprogress.css"</span><span class="token punctuation">;</span>//1、对axios二次封装const requests <span class="token operator">=</span> axios.create<span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL:<span class="token string">'/api'</span>, //基础路径，requests发出的请求在端口号后面会跟改baseURl    timeout: 5000, //连接请求超时时间<span class="token punctuation">}</span><span class="token punctuation">)</span>//2、配置请求拦截器requests.interceptors.request.use<span class="token punctuation">(</span>config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    //config内主要是对请求头Header配置    //比如添加token    //开启进度条    nprogress.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>//3、配置相应拦截器requests.interceptors.response.use<span class="token punctuation">((</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    //成功的回调函数    //响应成功，关闭进度条    nprogress.done<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  res.data<span class="token punctuation">;</span><span class="token punctuation">}</span>,<span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    nprogress.done<span class="token punctuation">(</span><span class="token punctuation">)</span> //隐藏进度条    //失败的回调函数    console.log<span class="token punctuation">(</span><span class="token string">"响应失败"</span>+error<span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise.reject<span class="token punctuation">(</span>new Error<span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">))</span><span class="token punctuation">}</span><span class="token punctuation">)</span>//4、对外暴露<span class="token function">export</span> default requests<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手动引入vuex"><a href="#手动引入vuex" class="headerlink" title="手动引入vuex"></a>手动引入vuex</h3><p>首先安装vuex，src目录下创建store文件夹，并在该文件夹下创建index.js,如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> Vue from <span class="token string">'vue'</span><span class="token function">import</span> Vuex from <span class="token string">'vuex'</span>Vue.use<span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>//对外暴露store的一个实例<span class="token function">export</span> default new Vuex.Store<span class="token punctuation">(</span><span class="token punctuation">{</span>    state:<span class="token punctuation">{</span><span class="token punctuation">}</span>,    mutations:<span class="token punctuation">{</span><span class="token punctuation">}</span>,    actions:<span class="token punctuation">{</span><span class="token punctuation">}</span>,    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想使用vuex，还需要在main.js中引入。</p><p>main.js：（1）引入文件；（2）注册store</p><p><strong>但凡是在main.js中的Vue实例中注册的实体，在所有组件中都会有（this.$.实体名）属性</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> store from <span class="token string">'./store'</span>new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>  render: h <span class="token operator">=</span><span class="token operator">></span> h<span class="token punctuation">(</span>App<span class="token punctuation">)</span>,  //注册路由，此时组件中都会拥有<span class="token variable">$router</span> <span class="token variable">$route</span>属性  router,  //注册store,此时组件中都会拥有<span class="token variable">$store</span>  store<span class="token punctuation">}</span><span class="token punctuation">)</span>.<span class="token variable">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="async-await使用"><a href="#async-await使用" class="headerlink" title="async await使用"></a>async await使用</h3><p>如果我们没有封装api，而是直接调用axios，就不需要使用async await</p><p>我们将一个axios请求封装成了函数，我们在下面代码中调用了该函数：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token punctuation">{</span>reqCateGoryList<span class="token punctuation">}</span> from <span class="token string">'@/api'</span><span class="token function">export</span> default <span class="token punctuation">{</span>    actions:<span class="token punctuation">{</span>        categoryList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> result <span class="token operator">=</span>  reqCateGoryList<span class="token punctuation">(</span><span class="token punctuation">)</span>            console.log<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器结果：</p><p><img src="https://img-blog.csdnimg.cn/d2ba586e3edd494b9bf517cb4ee86580.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5q-b5q-b6Jmr5ZGc5ZGc,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>​       返回了一个promise，证明这是一个promise请求，但是我们想要的是图片中的data数据。</p><p>没有将函数封装前，我们都会通过then()回调函数拿到服务器返回的数据，现在我们将其封装了，依然可以使用then获取数据，代码如下：</p><pre class="line-numbers language-bash"><code class="language-bash">actions:<span class="token punctuation">{</span>        categoryList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> result <span class="token operator">=</span>  reqCateGoryList<span class="token punctuation">(</span><span class="token punctuation">)</span>.then<span class="token punctuation">(</span>                res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                console.log<span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">)</span>                console.log<span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token keyword">return</span> res                <span class="token punctuation">}</span>            <span class="token punctuation">)</span>            console.log<span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span>            console.log<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>     ![](https://img-blog.csdnimg.cn/ccf35a9aa6c442c7a799e474c0293afa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5q-b5q-b6Jmr5ZGc5ZGc,size_15,color_FFFFFF,t_70,g_se,x_16)</code></pre><p>我们引入async await，async写在函数名前，await写在api函数前面。<strong>await先执行完后，再执行async</strong>，这也使得只有reqCateGoryList执行完，result得到返回值后，才会执行后面的输出操作。</p><pre class="line-numbers language-bash"><code class="language-bash">async categoryList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> await reqCategoryList<span class="token punctuation">(</span><span class="token punctuation">)</span>    console.log<span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span>    console.log<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="https://img-blog.csdnimg.cn/160a7e87520d494787915f3fe9fa4640.png"></p><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>state、actions、mutations、getters中的辅助函数（mapXxx）使用，当多次访问store中的上述属性时，要使用这个属性的辅助函数，可以减少代码量。</p><p><strong>在使用上面的函数时，如果需要传递多个参数，需要把多个参数组合成一个对象传入（vuex是不允许多个参数分开传递的）</strong></p><pre class="line-numbers language-bash"><code class="language-bash">async addOrUpdateShopCart<span class="token punctuation">(</span><span class="token punctuation">{</span>commit<span class="token punctuation">}</span>,<span class="token punctuation">{</span>skuId,skuNum<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> await reqAddOrUpdateShopCart<span class="token punctuation">(</span>skuId,skuNum<span class="token punctuation">)</span>    console.log<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    if<span class="token punctuation">(</span>result.data <span class="token operator">==</span> 200<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Matery性能优化</title>
      <link href="/2022/01/08/hexo-matery-xing-neng-you-hua/"/>
      <url>/2022/01/08/hexo-matery-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Hexo-Matery访问优化"><a href="#Hexo-Matery访问优化" class="headerlink" title="Hexo-Matery访问优化"></a>Hexo-Matery访问优化</h2><h3 id="一、npm速度优化"><a href="#一、npm速度优化" class="headerlink" title="一、npm速度优化"></a>一、npm速度优化</h3><hr><blockquote><p>玩hexo的，肯定要和npm打交道，但是npm的下载速度着实优点慢。</p><p>由于平常要经常安装插件，建议先更改npm仓库地址，以便更快的安装插件。</p></blockquote><ul><li><p>阿里的淘宝团队在国内做了个跟npm仓库一样的镜像叫<code>cnpm</code>。</p></li><li><p>淘宝镜像与npm官方包的同步频率目前为10分钟一次，来保证尽量与官方服务同步。</p></li><li><p>所以二者可以说是一样，不用担心有什么差别。</p></li></ul><p><strong>1. 通过改变地址来使用淘宝镜像（推荐）</strong></p><ul><li><p>npm的默认仓库地址是 <code>https://registry.npmjs.org/</code></p></li><li><p>可以使用一下命令查看当前npm的仓库地址</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>可以使用以下命令来改变默认下载地址，从而达到不安装<code>cnpm</code>就能使用淘宝镜像的目的，然后是用上面的get命令查看是否设置成功。</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.安装cnpm</strong></p><ul><li>安装cnpm，命令：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>安装后，使用以下命令测试是否安装成功：<pre class="line-numbers language-bash"><code class="language-bash">cnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>成功后，以后都是用<code>cnpm</code>代替以前<code>npm</code>来执行命令</li></ul><h3 id="二、访问速度优化"><a href="#二、访问速度优化" class="headerlink" title="二、访问速度优化"></a>二、访问速度优化</h3><hr><h4 id="1-图片加载优化"><a href="#1-图片加载优化" class="headerlink" title="1. 图片加载优化"></a>1. 图片加载优化</h4><p><strong>预加载：</strong> 就是进入项目前提前加载资源，避免在项目中加载缓慢，影响用户体验。</p><ul><li>缺点：会增加服务器压力。</li></ul><p><strong>懒加载：</strong> 一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载。</p><ul><li>优点：对服务器有一定的缓解压力作用。</li></ul><p><code>matery主题</code>整体采用预加载模式，这样可以在我们访问其他页面的时候稍微快点。我们可以在这个基础上对图片进行懒加载，这样做的效果就是html、css、js加载之后，图片再加载。既保证了网页的打开速度，也不会因图片的庞大体积而拖累了整个网页的加载。</p><p>首先安装图片懒加载插件：<code>hexo-lazyload-image</code></p><p>在Hexo根目录执行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在hexo配置文件下添加下面的代码：</p><pre class="line-numbers language-bash"><code class="language-bash">lazyload:  enable: <span class="token boolean">true</span>  <span class="token comment" spellcheck="true"># 是否开启图片懒加载</span>  onlypost: <span class="token boolean">false</span>  <span class="token comment" spellcheck="true"># 是否只对文章的图片做懒加载</span>  loadingImg: <span class="token comment" spellcheck="true"># eg ./images/loading.gif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行<code>hexo clean&amp;&amp;hexo g&amp;&amp;hexo s</code>就能看到效果，以后博客上的图片就是懒加载了，以上步骤理论上任何主题都可以用。</p><ul><li><p>一般情况下懒加载会和gallery插件发生冲突，结果可能是点开图片，左翻右翻都是loading image。<br>matery主题解决方案是：<br>修改主题文件下的<code>/themes/matery/source/js/matery.js</code>，在108行左右添加以下代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable"><span class="token variable">$(</span>document<span class="token variable">)</span></span>.find<span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span>.each<span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span>.parent<span class="token punctuation">(</span><span class="token punctuation">)</span>.attr<span class="token punctuation">(</span><span class="token string">"href"</span>, <span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span>.attr<span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>做完这步之后，还有点小Bug，首页的logo点击会直接打开logo图，而不是跳到首页。<br>解决方案：打开<code>/themes/matery/layout/_partial/header.ejs</code>文件，在<code>img</code>和<code>span</code>的两个头加个<code>div</code>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"brand-logo"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for() %>"</span> class<span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.logo <span class="token operator">!=</span><span class="token operator">=</span> undefined <span class="token operator">&amp;&amp;</span> theme.logo.length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"&lt;%= theme.logo %>"</span> class<span class="token operator">=</span><span class="token string">"logo-img"</span> alt<span class="token operator">=</span><span class="token string">"LOGO"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>          <span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"logo-span"</span><span class="token operator">></span><span class="token operator">&lt;</span>%- config.title %<span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义loding图片<br><code>hexo-lazyload-image</code>插件提供了自定义loading图片的选项<br>方法就是在<code>loadImg</code>后配置图片的路径就好了</p><pre class="line-numbers language-bash"><code class="language-bash">lazyload:enable: <span class="token boolean">true</span> onlypost: <span class="token boolean">false</span>  <span class="token comment" spellcheck="true"># 是否只对文章的图片做懒加载</span>loadingImg: /medias/loading.gif <span class="token comment" spellcheck="true"># eg ./images/loading.gif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>懒加载优化</strong></p><blockquote><p>经过以上操作就已经很完美了，以下内容可不做</p></blockquote><ul><li>其实第一次加载后本地都是有缓存的，如果每次都把loading显示出来就不那么好看，所以我们需要对插件进行魔改，让图片稍微提前加载，避开加载动画。</li><li>打开<code>Hexo根目录&gt;node_modules &gt; hexo-lazyload-image &gt; lib &gt; simple-lazyload.js</code>文件</li><li>将第9行修改为：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&amp;&amp;</span> rect.top <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>window.innerHeight +240 <span class="token operator">||</span> document.documentElement.clientHeight +240<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>作用：提前240个像素加载图片；当然这个值也可以根据自己情况修改。</li></ul><h4 id="2-代码压缩优化"><a href="#2-代码压缩优化" class="headerlink" title="2.代码压缩优化"></a>2.代码压缩优化</h4><p>（1）进入Hexo根目录下依次执行下面的命令：（建议sudo）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 全局安装gulp模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp -g<span class="token comment" spellcheck="true"># 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span><span class="token function">npm</span> <span class="token function">install</span> gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify ulp-imagemin@7.1.0 --save<span class="token comment" spellcheck="true"># 额外的功能模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Hexo根目录新建文件<code>gulpfile.js</code>，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。</p><pre class="line-numbers language-bash"><code class="language-bash">var gulp <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var debug <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"gulp-debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var cleancss <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"gulp-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //css压缩组件var uglify <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"gulp-uglify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //js压缩组件var htmlmin <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"gulp-htmlmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //html压缩组件var htmlclean <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"gulp-htmlclean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //html清理组件var imagemin <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"gulp-imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //图片压缩组件var changed <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"gulp-changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //文件更改校验组件var gulpif <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"gulp-if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //任务 帮助调用组件var plumber <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"gulp-plumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //容错组件（发生错误不跳出任务，并报出错误内容）var isScriptAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> //是否处理所有文件，<span class="token punctuation">(</span>true<span class="token operator">|</span>处理所有文件<span class="token punctuation">)</span><span class="token punctuation">(</span>false<span class="token operator">|</span>只处理有更改的文件<span class="token punctuation">)</span>var isDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> //是否调试显示 编译通过的文件var gulpBabel <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"gulp-babel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var es2015Preset <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"babel-preset-es2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var del <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var Hexo <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"hexo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var hexo <span class="token operator">=</span> new Hexo<span class="token punctuation">(</span>process.cwd<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 初始化一个hexo对象 // 清除public文件夹gulp.task<span class="token punctuation">(</span><span class="token string">"clean"</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> del<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"public/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 下面几个跟hexo有关的操作，主要通过hexo.call<span class="token punctuation">(</span><span class="token punctuation">)</span>去执行，注意return// 创建静态页面 （等同 hexo generate）gulp.task<span class="token punctuation">(</span><span class="token string">"generate"</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo.init<span class="token punctuation">(</span><span class="token punctuation">)</span>.then<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo            .call<span class="token punctuation">(</span><span class="token string">"generate"</span>, <span class="token punctuation">{</span>                watch: <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            .then<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo.exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            .catch<span class="token punctuation">(</span>function <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo.exit<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 启动Hexo服务器gulp.task<span class="token punctuation">(</span><span class="token string">"server"</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo        .init<span class="token punctuation">(</span><span class="token punctuation">)</span>        .then<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> hexo.call<span class="token punctuation">(</span><span class="token string">"server"</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        .catch<span class="token punctuation">(</span>function <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console.log<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 部署到服务器gulp.task<span class="token punctuation">(</span><span class="token string">"deploy"</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo.init<span class="token punctuation">(</span><span class="token punctuation">)</span>.then<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo            .call<span class="token punctuation">(</span><span class="token string">"deploy"</span>, <span class="token punctuation">{</span>                watch: <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            .then<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo.exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            .catch<span class="token punctuation">(</span>function <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo.exit<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 压缩public目录下的js文件gulp.task<span class="token punctuation">(</span><span class="token string">"compressJs"</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp        .src<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.js"</span>, <span class="token string">"!./public/libs/**"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> //排除的js        .pipe<span class="token punctuation">(</span>gulpif<span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll, changed<span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">))</span><span class="token punctuation">)</span>        .pipe<span class="token punctuation">(</span>gulpif<span class="token punctuation">(</span>isDebug, debug<span class="token punctuation">(</span><span class="token punctuation">{</span> title: <span class="token string">"Compress JS:"</span> <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">)</span>        .pipe<span class="token punctuation">(</span>plumber<span class="token punctuation">(</span><span class="token punctuation">))</span>        .pipe<span class="token punctuation">(</span>            gulpBabel<span class="token punctuation">(</span><span class="token punctuation">{</span>                presets: <span class="token punctuation">[</span>es2015Preset<span class="token punctuation">]</span> // es5检查机制            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        .pipe<span class="token punctuation">(</span>uglify<span class="token punctuation">(</span><span class="token punctuation">))</span> //调用压缩组件方法uglify<span class="token punctuation">(</span><span class="token punctuation">)</span>,对合并的文件进行压缩        .pipe<span class="token punctuation">(</span>gulp.dest<span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">))</span><span class="token punctuation">;</span> //输出到目标目录<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 压缩public目录下的css文件gulp.task<span class="token punctuation">(</span><span class="token string">"compressCss"</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    var option <span class="token operator">=</span> <span class="token punctuation">{</span>        rebase: false,        //advanced: true, //类型：Boolean 默认：true <span class="token punctuation">[</span>是否开启高级优化（合并选择器等）<span class="token punctuation">]</span>        compatibility: <span class="token string">"ie7"</span> //保留ie7及以下兼容写法 类型：String 默认：<span class="token string">''</span>or<span class="token string">'*'</span> <span class="token punctuation">[</span>启用兼容模式； <span class="token string">'ie7'</span>：IE7兼容模式，<span class="token string">'ie8'</span>：IE8兼容模式，<span class="token string">'*'</span>：IE9+兼容模式<span class="token punctuation">]</span>        //keepBreaks: true, //类型：Boolean 默认：false <span class="token punctuation">[</span>是否保留换行<span class="token punctuation">]</span>        //keepSpecialComments: <span class="token string">'*'</span> //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        .src<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.css"</span>, <span class="token string">"!./public/**/*.min.css"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> //排除的css        .pipe<span class="token punctuation">(</span>gulpif<span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll, changed<span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">))</span><span class="token punctuation">)</span>        .pipe<span class="token punctuation">(</span>gulpif<span class="token punctuation">(</span>isDebug, debug<span class="token punctuation">(</span><span class="token punctuation">{</span> title: <span class="token string">"Compress CSS:"</span> <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">)</span>        .pipe<span class="token punctuation">(</span>plumber<span class="token punctuation">(</span><span class="token punctuation">))</span>        .pipe<span class="token punctuation">(</span>cleancss<span class="token punctuation">(</span>option<span class="token punctuation">))</span>        .pipe<span class="token punctuation">(</span>gulp.dest<span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 压缩public目录下的html文件gulp.task<span class="token punctuation">(</span><span class="token string">"compressHtml"</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    var cleanOptions <span class="token operator">=</span> <span class="token punctuation">{</span>        protect: /<span class="token operator">&lt;</span>\<span class="token operator">!</span>--%fooTemplate\b.*?%--<span class="token operator">></span>/g, //忽略处理        unprotect: /<span class="token operator">&lt;</span>script <span class="token punctuation">[</span>^<span class="token operator">></span><span class="token punctuation">]</span>*\btype<span class="token operator">=</span><span class="token string">"text\/x-handlebars-template"</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span>+?<span class="token operator">&lt;</span>\/script<span class="token operator">></span>/gi //特殊处理    <span class="token punctuation">}</span><span class="token punctuation">;</span>    var minOption <span class="token operator">=</span> <span class="token punctuation">{</span>        collapseWhitespace: true, //压缩HTML        collapseBooleanAttributes: true, //省略布尔属性的值 <span class="token operator">&lt;</span>input checked<span class="token operator">=</span><span class="token string">"true"</span>/<span class="token operator">></span> <span class="token operator">==</span><span class="token operator">></span> <span class="token operator">&lt;</span>input /<span class="token operator">></span>        removeEmptyAttributes: true, //删除所有空格作属性值 <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">""</span> /<span class="token operator">></span> <span class="token operator">==</span><span class="token operator">></span> <span class="token operator">&lt;</span>input /<span class="token operator">></span>        removeScriptTypeAttributes: true, //删除<span class="token operator">&lt;</span>script<span class="token operator">></span>的type<span class="token operator">=</span><span class="token string">"text/javascript"</span>        removeStyleLinkTypeAttributes: true, //删除<span class="token operator">&lt;</span>style<span class="token operator">></span>和<span class="token operator">&lt;</span>link<span class="token operator">></span>的type<span class="token operator">=</span><span class="token string">"text/css"</span>        removeComments: true, //清除HTML注释        minifyJS: true, //压缩页面JS        minifyCSS: true, //压缩页面CSS        minifyURLs: <span class="token boolean">true</span> //替换页面URL    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        .src<span class="token punctuation">(</span><span class="token string">"./public/**/*.html"</span><span class="token punctuation">)</span>        .pipe<span class="token punctuation">(</span>gulpif<span class="token punctuation">(</span>isDebug, debug<span class="token punctuation">(</span><span class="token punctuation">{</span> title: <span class="token string">"Compress HTML:"</span> <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">)</span>        .pipe<span class="token punctuation">(</span>plumber<span class="token punctuation">(</span><span class="token punctuation">))</span>        .pipe<span class="token punctuation">(</span>htmlclean<span class="token punctuation">(</span>cleanOptions<span class="token punctuation">))</span>        .pipe<span class="token punctuation">(</span>htmlmin<span class="token punctuation">(</span>minOption<span class="token punctuation">))</span>        .pipe<span class="token punctuation">(</span>gulp.dest<span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 压缩 public/medias 目录内图片gulp.task<span class="token punctuation">(</span><span class="token string">"compressImage"</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    var option <span class="token operator">=</span> <span class="token punctuation">{</span>        optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级）        progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片        interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染        //multipass: <span class="token boolean">false</span> //类型：Boolean 默认：false 多次优化svg直到完全优化    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        .src<span class="token punctuation">(</span><span class="token string">"./public/medias/**/*.*"</span><span class="token punctuation">)</span>        .pipe<span class="token punctuation">(</span>gulpif<span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll, changed<span class="token punctuation">(</span><span class="token string">"./public/medias"</span><span class="token punctuation">))</span><span class="token punctuation">)</span>        .pipe<span class="token punctuation">(</span>gulpif<span class="token punctuation">(</span>isDebug, debug<span class="token punctuation">(</span><span class="token punctuation">{</span> title: <span class="token string">"Compress Images:"</span> <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">)</span>        .pipe<span class="token punctuation">(</span>plumber<span class="token punctuation">(</span><span class="token punctuation">))</span>        .pipe<span class="token punctuation">(</span>imagemin<span class="token punctuation">(</span>option<span class="token punctuation">))</span>        .pipe<span class="token punctuation">(</span>gulp.dest<span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 执行顺序： 清除public目录 -<span class="token operator">></span> 产生原始博客内容 -<span class="token operator">></span> 执行压缩混淆 -<span class="token operator">></span> 部署到服务器gulp.task<span class="token punctuation">(</span>    <span class="token string">"build"</span>,    gulp.series<span class="token punctuation">(</span>        <span class="token string">"clean"</span>,        <span class="token string">"generate"</span>,        <span class="token string">"compressHtml"</span>,        <span class="token string">"compressCss"</span>,        <span class="token string">"compressJs"</span>,        <span class="token string">"compressImage"</span>,        gulp.parallel<span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 默认任务gulp.task<span class="token punctuation">(</span>    <span class="token string">"default"</span>,    gulp.series<span class="token punctuation">(</span>        <span class="token string">"clean"</span>,        <span class="token string">"generate"</span>,        gulp.parallel<span class="token punctuation">(</span><span class="token string">"compressHtml"</span>, <span class="token string">"compressCss"</span>, <span class="token string">"compressJs"</span>,<span class="token string">"compressImage"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>以后的执行方式有两种：</p><ul><li><p>直接在Hexo根目录执行<code>gulp</code>或者gulp default，这个命令相当于<code>hexo cl&amp;&amp;hexo g</code>并且再把代码和图片压缩。</p></li><li><p>在Hexo根目录执行<code>gulp build</code>，这个命令与第一种相比：在最后又加了个<code>hexo d</code>，等于说生成、压缩文件后又帮你自动部署了！！！</p></li></ul></li><li><p>值得注意的是：这个加入了图片压缩，如果不想用图片压缩，可以把第154行的<code>compressImage</code>和第165行的<code>compressImage</code>去掉即可。</p></li></ul><h4 id="3-全站CDN加速"><a href="#3-全站CDN加速" class="headerlink" title="3.全站CDN加速"></a>3.全站CDN加速</h4><p>CDN全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络堵塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。————百度百科<br>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，<code>jsDelivr + Github</code>便是免费且好用的CDN，非常适合博客网站使用。<br><strong>用法：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash"><code class="language-bash">https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：版本号不是必须的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源。还可以配合<code>PicGo</code>图床上传工具的<strong>自定义域名前缀</strong>来上传图片，使用及其方便。</p><h4 id="重点（敲黑板！）"><a href="#重点（敲黑板！）" class="headerlink" title="重点（敲黑板！）"></a>重点（敲黑板！）</h4><hr><p><strong>这个不止可以作用于图片，可以像这样把所有的css、js等文件的加载路径都修改下，从而让全站使用CDN加速！具体怎么修改要根据主题的情况而定，比较麻烦，不过原理都是一样的，有能力的可以改改。</strong></p><p>其他CDN：</p><p><code>腾讯</code>：COS+CDN</p><p><code>阿里</code>：OSS</p><h3 id="三、优化小技巧"><a href="#三、优化小技巧" class="headerlink" title="三、优化小技巧"></a>三、优化小技巧</h3><h4 id="异步加载JS"><a href="#异步加载JS" class="headerlink" title="异步加载JS"></a>异步加载JS</h4><p><strong>方法：</strong>将JS文件的引入，放到HTML的body结束标签的上方</p><pre class="line-numbers language-basic"><code class="language-basic"><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>Hello World<span class="token comment" spellcheck="true">!&lt;/title></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        xxxxx....        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"xx/xx.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong>首先要明白，HTML的加载是从上往下一行一行解释执行的，把js文件的引入放到下面，这样就会把HTML页面展示出来，然后再加载js。这样看起来的效果就是，答题的网页先出来，而js让它慢慢加载执行，如果你把js放到网页上方，效果就是必须要加载完js才能继续展示网页，体验极差。</p><p><strong>注意：</strong>原主题的js文件尽量不要动，我们只需要将自己增加的一些js按照异步加载的方式做即可，比如一些音乐js插件、实时在线聊天js插件等放到最后即可！因为这些文件要加载的东西很多。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo-Matery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的路由</title>
      <link href="/2022/01/08/vue-zhong-de-lu-you/"/>
      <url>/2022/01/08/vue-zhong-de-lu-you/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><h3 id="一、vue-router的理解"><a href="#一、vue-router的理解" class="headerlink" title="一、vue-router的理解"></a>一、vue-router的理解</h3><p>vue的一个插件库，专门用来实现<code>SPA应用</code></p><h3 id="二、SPA应用"><a href="#二、SPA应用" class="headerlink" title="二、SPA应用"></a>二、SPA应用</h3><ol><li><p>单页Web应用（single page web application，SPA）；</p></li><li><p>整个应用<code>只有一个完整的页面</code>；</p></li><li><p>点击页面中的导航链接<code>不会刷新</code>页面，只会做页面的<code>局部刷新</code>；</p></li><li><p>数据需要通过Ajax请求获取。</p></li></ol><h3 id="三、路由的理解"><a href="#三、路由的理解" class="headerlink" title="三、路由的理解"></a>三、路由的理解</h3><ol><li><p>什么是路由？</p><p> （1）一个路由（route）就是一组映射关系（key-value），多个路由需要路由器（router）进行管理。</p><p> （2）key为路径，value可能是function或<code>component</code></p></li><li><p>路由分类</p><ul><li><p>后端路由：</p><ul><li><p>理解：value是function，用于处理客户端提交的请求。</p></li><li><p>工作过程：服务器收到一个请求时，根据<code>请求路径</code>找到匹配的<code>函数</code>来处理请求，返回响应数据。</p></li></ul></li><li><p><strong>前端路由：</strong></p><ul><li><p>理解：value是component组件，用于展示页面内容。</p></li><li><p>工作过程：当浏览器的路径改变时，对应的组件就会显示。</p></li></ul></li></ul></li></ol><h3 id="四、基本使用"><a href="#四、基本使用" class="headerlink" title="四、基本使用"></a>四、基本使用</h3><ol><li><p>安装vue-router，命令：npm i –save vue-router</p></li><li><p>应用插件：Vue.use(VueRouter)</p></li><li><p>编写router配置项：</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">//引入VueRouter<span class="token function">import</span> VueRouter from <span class="token string">'vue-router'</span>//引入路由组件<span class="token function">import</span> About from <span class="token string">'../components/About'</span><span class="token function">import</span> Home from <span class="token string">'../components/Home'</span>//创建router实例对象，去管理一组一组的路由规则const router <span class="token operator">=</span> new VueRouter<span class="token punctuation">(</span><span class="token punctuation">{</span>    routes:<span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path: <span class="token string">'/about'</span>,            component: About        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>            path: <span class="token string">'/home'</span>,            component: Home        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>            path: <span class="token string">'*'</span>,  //重定向            redirect: <span class="token string">'/home'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>//暴露router<span class="token function">export</span> default router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>实现切换（active-class可配置高亮样式）</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>router-link active-class<span class="token operator">=</span><span class="token string">"active"</span> to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span>/router-link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>指定展示位置</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>router-view<span class="token operator">></span><span class="token operator">&lt;</span>/router-view<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="五、几个注意点"><a href="#五、几个注意点" class="headerlink" title="五、几个注意点"></a>五、几个注意点</h3><ol><li><p>路由组件通常存放在<code>pages</code>文件夹，一般组件通常放在<code>components</code>文件夹。</p></li><li><p>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</p></li><li><p>每个组件都有自己的$route属性，里面存储着自己的路由信息。</p></li><li><p>整个应用只有一个router，可以通过组件的$router属性获取到。</p></li></ol><h3 id="六、多级路由（嵌套路由）"><a href="#六、多级路由（嵌套路由）" class="headerlink" title="六、多级路由（嵌套路由）"></a>六、多级路由（嵌套路由）</h3><ol><li>配置路由规则，使用children配置项：</li></ol><pre class="line-numbers language-bash"><code class="language-bash">routes:<span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path: <span class="token string">'/about'</span>,        component: About,    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>        path: <span class="token string">'/home'</span>,        component: Home,        children: <span class="token punctuation">[</span> //通过children配置子级路由            <span class="token punctuation">{</span>                path: <span class="token string">'news'</span>, //此处一定不要写：/news                component: News            <span class="token punctuation">}</span>,            <span class="token punctuation">{</span>                path: <span class="token string">'message'</span>, //此处一定不要写：/message                component: Message            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>跳转（要写完整路径）：</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>router-link to<span class="token operator">=</span><span class="token string">"/home/news"</span><span class="token operator">></span>News<span class="token operator">&lt;</span>/router-link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="七、路由的query参数"><a href="#七、路由的query参数" class="headerlink" title="七、路由的query参数"></a>七、路由的query参数</h3><ol><li>传递参数</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 跳转并携带query参数，to的字符串写法 --<span class="token operator">></span><span class="token operator">&lt;</span>router-link :to<span class="token operator">=</span><span class="token string">"/home/message/detail?id=666&amp;title=你好"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span>/router-link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 跳转并携带query参数，to的对象写法 --<span class="token operator">></span><span class="token operator">&lt;</span>router-link    :to<span class="token operator">=</span> <span class="token string">"{        path: '/home/message/detail',        query: {            id: 666,            title: '你好'        }    }"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span>/router-link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>接收参数：</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$route</span>.query.id<span class="token variable">$route</span>.query.title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="八、命名路由"><a href="#八、命名路由" class="headerlink" title="八、命名路由"></a>八、命名路由</h3><ol><li><p>作用：可以<code>简化</code>路由的跳转</p></li><li><p>如何使用？</p><p> （1）给路由命名：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span>    path: <span class="token string">'/demo'</span>,    component: Demo,    children: <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path: <span class="token string">'test'</span>,            component: Test,            children: <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    name: <span class="token string">'hello'</span>, //给路由命名                    path: <span class="token string">'welcome'</span>,                    component: Hello                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （2）简化跳转：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 简化前，需要写完整的路径 --<span class="token operator">></span><span class="token operator">&lt;</span>router-link to<span class="token operator">=</span><span class="token string">"/demo/test/welcom"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span>/router-link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 简化后，直接通过名字跳转 --<span class="token operator">></span><span class="token operator">&lt;</span>router-link :to<span class="token operator">=</span><span class="token string">"{name: hello}"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span>/router-link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 简化写法配合传递参数 --<span class="token operator">></span><span class="token operator">&lt;</span>router-link     :to<span class="token operator">=</span><span class="token string">"{        name: 'hello',        query: {            id: 666,            title: '你好'        }    }"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span>/router-link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="九、路由的params参数"><a href="#九、路由的params参数" class="headerlink" title="九、路由的params参数"></a>九、路由的params参数</h3><p>1.配置路由，声明接收params参数</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span>    path: <span class="token string">'/home'</span>,    component: Home,    children: <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path: <span class="token string">'news'</span>,            component: News        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>            path: <span class="token string">'message'</span>,            component: Message,            children: <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    name: <span class="token string">'xiangqing'</span>,                    path: <span class="token string">'detail/:id/:title'</span>, //使用占位符声明接收params参数                    component: Detail                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>传递参数</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 跳转并携带params参数，to的字符串写法 --<span class="token operator">></span><span class="token operator">&lt;</span>router-link :to<span class="token operator">=</span><span class="token string">"/home/message/detail/666/你好"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span>/router-link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 跳转并携带params参数，to的对象写法 --<span class="token operator">></span><span class="token operator">&lt;</span>router-link    :to<span class="token operator">=</span><span class="token string">"{        name: 'xiangqing', //这里必须使用name，不能使用path！！        params: {            id: 666,            title: '你好'        }    }"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span>/router-link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！！</p></blockquote><ol start="3"><li>接收参数</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$route</span>.params.id<span class="token variable">$route</span>.params.title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="十、路由的props配置"><a href="#十、路由的props配置" class="headerlink" title="十、路由的props配置"></a>十、路由的props配置</h3><p>作用：让路由组件更方便的收到参数</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span>    name: <span class="token string">'xiangqing'</span>,    path: <span class="token string">'detail/:id'</span>,    component: Detail,    //第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件    // props:<span class="token punctuation">{</span>a:900<span class="token punctuation">}</span>    //第二种写法：props为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件<span class="token punctuation">(</span>只能传params<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">)</span>    // props: <span class="token boolean">true</span>    //第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件<span class="token punctuation">(</span>更灵活<span class="token punctuation">)</span>    props<span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            id: route.query.id,            title:route.query.title        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十一、的replace属性"><a href="#十一、的replace属性" class="headerlink" title="十一、的replace属性"></a>十一、<router-link>的replace属性</h3><ol><li><p>作用：控制路由跳转时浏览器历史记录的模式</p></li><li><p>浏览器的历史记录有两种写入方式：分别为push和replace，push是<code>追加</code>历史记录，replace是<code>替换</code>历史记录。路由跳转时<code>默认为push</code></p></li><li><p>如何开启replace模式：&lt;router-link replace ……&gt;News</router-link></p></li></ol><h3 id="十二、编程式路由导航"><a href="#十二、编程式路由导航" class="headerlink" title="十二、编程式路由导航"></a>十二、编程式路由导航</h3><ol><li><p>作用：不借助<router-link>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体代码：</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">//<span class="token variable">$router</span>的两个APIthis.<span class="token variable">$router</span>.push<span class="token punctuation">(</span><span class="token punctuation">{</span> //相当于点击路由链接（可以返回当前路由界面）    name: <span class="token string">'xiangqing'</span>,    params: <span class="token punctuation">{</span>        id: xxx,        title: xxx    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>this.<span class="token variable">$router</span>.replace<span class="token punctuation">(</span><span class="token punctuation">{</span> //用新路由替换当前路由（不可以返回到当前路由界面）    name: <span class="token string">'xiangqing'</span>,    params:<span class="token punctuation">{</span>        id: xxx,        title: xxx    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>this.<span class="token variable">$router</span>.forward<span class="token punctuation">(</span><span class="token punctuation">)</span> //前进 ；请求（返回）下一个记录路由this.<span class="token variable">$router</span>.back<span class="token punctuation">(</span><span class="token punctuation">)</span> //后退；请求（返回）上一个记录路由this.<span class="token variable">$router</span>.go<span class="token punctuation">(</span><span class="token punctuation">)</span> //可前进也可后退（传1或-1）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十三、缓存路由组件"><a href="#十三、缓存路由组件" class="headerlink" title="十三、缓存路由组件"></a>十三、缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体代码：</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>keep-alive inclue<span class="token operator">=</span><span class="token string">"News"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router-view<span class="token operator">></span><span class="token operator">&lt;</span>/router-view<span class="token operator">></span><span class="token operator">&lt;</span>/keep-alive<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十四、两个新的生命周期钩子"><a href="#十四、两个新的生命周期钩子" class="headerlink" title="十四、两个新的生命周期钩子"></a>十四、两个新的生命周期钩子</h3><ol><li><p>作用：路由组件所<code>独有</code>的两个钩子，用于捕获路由组件的激活状态。</p></li><li><p>具体名字：<br> activated路由组件被激活时触发。<br> deactivated路由组件失活时触发。</p></li></ol><h3 id="十五、路由守卫"><a href="#十五、路由守卫" class="headerlink" title="十五、路由守卫"></a>十五、路由守卫</h3><ol><li><p>作用：对路由及进行权限控制</p></li><li><p>分类： 全局守卫、独享守卫、组件内守卫</p><p> （1）全局守卫</p><pre class="line-numbers language-bash"><code class="language-bash">//全局前置守卫：初始化时执行，每次路由切换前执行 router.beforeEach<span class="token punctuation">((</span>to,from,next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console.log<span class="token punctuation">(</span><span class="token string">'before'</span>, to, from<span class="token punctuation">)</span>   if<span class="token punctuation">(</span>to.meta.isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span> //判断当前路由是否需要进行权限控制       if<span class="token punctuation">(</span>localStorage.getItem<span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">{</span> //权限控制的具体规则           next<span class="token punctuation">(</span><span class="token punctuation">)</span> //放行       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           alert<span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       next<span class="token punctuation">(</span><span class="token punctuation">)</span> //放行   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> //全局后置守卫：初始化时执行、每次路由切换后执行 router.afterEach<span class="token punctuation">((</span>to,from<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console.log<span class="token punctuation">(</span><span class="token string">'afterEach'</span>, to, from<span class="token punctuation">)</span>   if<span class="token punctuation">(</span>to.meta.title<span class="token punctuation">)</span><span class="token punctuation">{</span>       document.title <span class="token operator">=</span> to.meta.title //修改网页的title   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       document.title <span class="token operator">=</span> <span class="token string">'vue_text'</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （2）独享守卫</p><pre class="line-numbers language-bash"><code class="language-bash">beforeEnter<span class="token punctuation">(</span>to, from, next<span class="token punctuation">)</span><span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span><span class="token string">'beforeEnter'</span>, to, from<span class="token punctuation">)</span>    if<span class="token punctuation">(</span>to.meta.isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span> //判断当前路由是否需要权限控制        if<span class="token punctuation">(</span>localStorage.getItem<span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            next<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            alert<span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        next<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （3）组件内守卫：</p><pre class="line-numbers language-bash"><code class="language-bash">//进入守卫：通过路由规则，进入该组件时被调用beforeRouterEnter<span class="token punctuation">(</span>to, from, next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>//离开守卫：通过路由规则，离开组件时被调用beforeRouterLeave<span class="token punctuation">(</span>to, from, next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="十六、路由器的两种工作模式"><a href="#十六、路由器的两种工作模式" class="headerlink" title="十六、路由器的两种工作模式"></a>十六、路由器的两种工作模式</h3><ol><li><p>对于一个url来说，什么是hash值？ ———— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在HTTP请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式(默认模式)：</p><ul><li><p>地址中永远带着#号，不美观。</p></li><li><p>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</p></li><li><p>兼容性好</p></li></ul></li><li><p>history模式(mode: ‘history’)：</p><ul><li><p>地址干净，美观。</p></li><li><p>兼容性和hash模式相比略差。</p></li><li><p>应用部署上线时需要后端人员支持，解决刷新页面服务端404问题。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 路由 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你会用ES6，那倒是用啊</title>
      <link href="/2022/01/06/es6-yu-fa/"/>
      <url>/2022/01/06/es6-yu-fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="你会用ES6，那倒是用啊"><a href="#你会用ES6，那倒是用啊" class="headerlink" title="你会用ES6，那倒是用啊"></a>你会用ES6，那倒是用啊</h1><h2 id="一、关于取值"><a href="#一、关于取值" class="headerlink" title="一、关于取值"></a>一、关于取值</h2><p>取值在程序中非常常见，比如从对象<code>obj</code>中取值</p><pre class="line-numbers language-bash"><code class="language-bash">const obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a: 1,    b: 2,    c: 3,    d: 4,    e: 5<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>吐槽：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">const a <span class="token operator">=</span> obj.a<span class="token punctuation">;</span>const b <span class="token operator">=</span> obj.b<span class="token punctuation">;</span>const c <span class="token operator">=</span> obj.c<span class="token punctuation">;</span>const d <span class="token operator">=</span> obj.d<span class="token punctuation">;</span>const e <span class="token operator">=</span> obj.e<span class="token punctuation">;</span>或者const f <span class="token operator">=</span> obj.a + obj.d<span class="token punctuation">;</span>const g <span class="token operator">=</span> obj.c + obj.e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>吐槽：“不会用ES6的解构赋值来取值吗？5行代码用1行代码搞定不香吗？直接用对象名+属性名去取值，要是对象名短还好，很长呢？搞得代码中到处都是这个对象名！”</p><p><strong>改进：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">const <span class="token punctuation">{</span>a,b,c,d,e<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>const f <span class="token operator">=</span> a + d<span class="token punctuation">;</span>const g <span class="token operator">=</span> c + e<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>反驳</strong></p><p>不是不用ES6的结构赋值，而是服务端返回的数据对象中的属性名不是我想要的，这样取值，不是还得重新创建个遍历赋值</p><p><strong>吐槽</strong></p><p>看来你对ES6的解构赋值掌握的还是不够彻底。如果想创建的变量名和对象的属性名不一致，可以这么写：</p><pre class="line-numbers language-bash"><code class="language-bash">const <span class="token punctuation">{</span>a: a1<span class="token punctuation">}</span> <span class="token operator">=</span> objconsole.log<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> //1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>补充</strong><br>ES6的结构赋值虽然好用。但是要注意结构的对象不能为<code>undefined、null</code>。否则会报错，故要给被解构的对象一个默认值。</p><pre class="line-numbers language-bash"><code class="language-bash">const <span class="token punctuation">{</span>a,b,c,d,e<span class="token punctuation">}</span> <span class="token operator">=</span> obj <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、关于合并数据"><a href="#二、关于合并数据" class="headerlink" title="二、关于合并数据"></a>二、关于合并数据</h2><p>比如合并两个数组，合并两个对象。</p><pre class="line-numbers language-bash"><code class="language-bash">const a <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span><span class="token punctuation">;</span>const b <span class="token operator">=</span> <span class="token punctuation">[</span>1,5,6<span class="token punctuation">]</span><span class="token punctuation">;</span>const c <span class="token operator">=</span> a.concat<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> //<span class="token punctuation">[</span>1,2,3,1,5,6<span class="token punctuation">]</span>const obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    a: 1,<span class="token punctuation">}</span>const obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    b: 1,<span class="token punctuation">}</span>const obj <span class="token operator">=</span> object.assign<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span>, obj1, obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> //<span class="token punctuation">{</span>a: 1,b: 2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>吐槽</strong><br>ES6的扩展运算符是不是忘记了，还有数组的合并不考虑去重吗？</p><p><strong>改进</strong></p><pre class="line-numbers language-bash"><code class="language-bash">    const a <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span><span class="token punctuation">;</span>    const b <span class="token operator">=</span> <span class="token punctuation">[</span>1,5,6<span class="token punctuation">]</span><span class="token punctuation">;</span>    const c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">..</span>.new Set<span class="token punctuation">(</span><span class="token punctuation">..</span>.a, <span class="token punctuation">..</span>.b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> //<span class="token punctuation">[</span>1,2,3,5,6<span class="token punctuation">]</span>    const obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>        a: 1,    <span class="token punctuation">}</span>    const obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>        b: 1,    <span class="token punctuation">}</span>       const obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">..</span>.obj1, <span class="token punctuation">..</span>.obj2<span class="token punctuation">}</span><span class="token punctuation">;</span> //<span class="token punctuation">{</span>a: 1,b: 1<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、关于拼接字符串"><a href="#三、关于拼接字符串" class="headerlink" title="三、关于拼接字符串"></a>三、关于拼接字符串</h2><pre class="line-numbers language-bash"><code class="language-bash">const name <span class="token operator">=</span> <span class="token string">'景昊'</span>,const score <span class="token operator">=</span> 59<span class="token punctuation">;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>score <span class="token operator">></span> 60<span class="token punctuation">)</span><span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>name<span class="token punctuation">}</span>的考试成绩及格<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>name<span class="token punctuation">}</span>的考试成绩不及格<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>吐槽</strong><br>像上面这样用ES6字符串模板，还不如不用，你们根本不清楚在<code>$&#123;&#125;</code>中可以做什么操作，在<code>$&#123;&#125;</code>中可以放任意的JavaScript表达式，可以进行运算，也可以引用对象属性。</p><p><strong>改进</strong></p><pre class="line-numbers language-bash"><code class="language-bash">const name <span class="token operator">=</span> <span class="token string">'景昊'</span>,const score <span class="token operator">=</span> 59<span class="token punctuation">;</span>const result <span class="token operator">=</span> `<span class="token variable">${name}</span>$<span class="token punctuation">{</span>score <span class="token operator">></span> 60?<span class="token string">'的考试成绩及格'</span> <span class="token keyword">:</span> <span class="token string">'的考试成绩不及格'</span><span class="token punctuation">}</span>`<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、关于if中判断条件"><a href="#四、关于if中判断条件" class="headerlink" title="四、关于if中判断条件"></a>四、关于if中判断条件</h2><pre class="line-numbers language-bash"><code class="language-bash">if<span class="token punctuation">(</span>type <span class="token operator">==</span> 1 <span class="token operator">||</span>   <span class="token function">type</span> <span class="token operator">==</span> 2 <span class="token operator">||</span>   <span class="token function">type</span> <span class="token operator">==</span> 3 <span class="token operator">||</span>   <span class="token function">type</span> <span class="token operator">==</span> 4 <span class="token operator">||</span>   <span class="token function">type</span> <span class="token operator">==</span> 5 <span class="token operator">||</span>    <span class="token punctuation">)</span><span class="token punctuation">{</span>    //<span class="token punctuation">..</span>.<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>吐槽</strong><br>ES6中数组实例方法<code>includes</code>不会使用吗？</p><p><strong>改进</strong></p><pre class="line-numbers language-bash"><code class="language-bash">const conditions <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3,4,5<span class="token punctuation">]</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>condition.includes<span class="token punctuation">(</span>type<span class="token punctuation">))</span><span class="token punctuation">{</span>    //<span class="token punctuation">..</span>.<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、关于列表搜索"><a href="#五、关于列表搜索" class="headerlink" title="五、关于列表搜索"></a>五、关于列表搜索</h2><p>在项目中，一些没分页的列表的搜索功能由前端来实现，搜索一般分为精准搜索和模糊搜索。搜索也叫过滤，一般用<code>filter</code>来实现。</p><pre class="line-numbers language-bash"><code class="language-bash">const a <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3,4,5<span class="token punctuation">]</span><span class="token punctuation">;</span>const result <span class="token operator">=</span> a.filter<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">==</span><span class="token operator">=</span> 3<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>吐槽</strong><br>如果是精准搜索不会用ES6中的<code>find</code>吗？性能优化懂吗，<code>find</code>方法中找到符合条件的项，就不会继续遍历数组</p><p><strong>改进</strong></p><pre class="line-numbers language-bash"><code class="language-bash">const a <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3,4,5<span class="token punctuation">]</span><span class="token punctuation">;</span>const result <span class="token operator">=</span> a.find<span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">==</span><span class="token operator">=</span> 3<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、关于扁平化数组"><a href="#六、关于扁平化数组" class="headerlink" title="六、关于扁平化数组"></a>六、关于扁平化数组</h2><p>一个部门JSON数据，属性名是部门id，属性值是各部门成员id数组集合，现在要把有的部门的成员id都提取到一个数组集合中。</p><pre class="line-numbers language-bash"><code class="language-bash">const deps <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'采购部'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span>,    <span class="token string">'人事部'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>5,8,12<span class="token punctuation">]</span>,    <span class="token string">'运输部'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>5,14,79<span class="token punctuation">]</span>,    <span class="token string">'行政部'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>3,64,105<span class="token punctuation">]</span>,<span class="token punctuation">}</span><span class="token keyword">let</span> member <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>let item <span class="token keyword">in</span> deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    const value <span class="token operator">=</span> deps<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>Array.isArray<span class="token punctuation">(</span>value<span class="token punctuation">))</span><span class="token punctuation">{</span>        member <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">..</span>.member, <span class="token punctuation">..</span>.value<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>member <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">..</span>.new Set<span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>吐槽</strong><br>获取对象的全部属性值还要遍历吗？<code>Object.values</code>忘记了吗？还有涉及到数组的扁平化处理，为啥不用ES6提供的<code>flat</code>方法呢，还好这次的数组的深度最多只有2维，要是遇到4维、5维深度的数组，是不是循环嵌套循环来扁平化？</p><p><strong>改进</strong></p><pre class="line-numbers language-bash"><code class="language-bash">const deps <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'采购部'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span>,    <span class="token string">'人事部'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>5,8,12<span class="token punctuation">]</span>,    <span class="token string">'运输部'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>5,14,79<span class="token punctuation">]</span>,    <span class="token string">'行政部'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>3,64,105<span class="token punctuation">]</span>,<span class="token punctuation">}</span><span class="token keyword">let</span> member <span class="token operator">=</span> Object.values<span class="token punctuation">(</span>deps<span class="token punctuation">)</span>.flat<span class="token punctuation">(</span>Infinity<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中使用<code>Infinity</code>作为<code>flat</code>的参数，使得无需知道被扁平化的数组的维度。</p><p><strong>补充</strong><br><code>flat</code>方法不支持IE浏览器</p><h2 id="七、关于获取对象属性"><a href="#七、关于获取对象属性" class="headerlink" title="七、关于获取对象属性"></a>七、关于获取对象属性</h2><pre class="line-numbers language-bash"><code class="language-bash">const name <span class="token operator">=</span> obj <span class="token operator">&amp;&amp;</span> obj.name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>吐槽</strong><br>ES6中的可选链操作符会使用吗？</p><p><strong>改进</strong></p><pre class="line-numbers language-bash"><code class="language-bash">const name <span class="token operator">=</span> obj?.name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="八、关于添加对象属性"><a href="#八、关于添加对象属性" class="headerlink" title="八、关于添加对象属性"></a>八、关于添加对象属性</h2><p>当给对象添加属性时，如果属性名是动态变化的，该怎么处理。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> index <span class="token operator">=</span> 1<span class="token punctuation">;</span><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token variable"><span class="token variable">`</span>topic$<span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'话题内容'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>吐槽</strong><br>为何要额外创建一个变量。不知道ES6中的对象属性名是可以用表达式吗？</p><p><strong>改进</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> index <span class="token operator">=</span> 1<span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token variable"><span class="token variable">`</span>topic$<span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'话题内容'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、关于输入框非空的判断"><a href="#九、关于输入框非空的判断" class="headerlink" title="九、关于输入框非空的判断"></a>九、关于输入框非空的判断</h2><p>在处理输入框相关业务时，往往会判断输入框未输入值的场景。</p><pre class="line-numbers language-bash"><code class="language-bash">if<span class="token punctuation">(</span>value <span class="token operator">!=</span><span class="token operator">=</span> null <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span><span class="token operator">=</span> undefined <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //<span class="token punctuation">..</span>.<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>吐槽</strong><br>ES6中新出的空值合并运算符了解过吗，要写那么多条件吗？</p><pre class="line-numbers language-bash"><code class="language-bash">if<span class="token punctuation">((</span>value??<span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //<span class="token punctuation">..</span>.<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、关于异步函数"><a href="#十、关于异步函数" class="headerlink" title="十、关于异步函数"></a>十、关于异步函数</h2><p>异步函数很常见，经常是用Promise来实现</p><pre class="line-numbers language-bash"><code class="language-bash">const fn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> new Promise<span class="token punctuation">((</span>resolve, reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        setTimeout<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            resolve<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>, 300<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>const fn2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> new Promise<span class="token punctuation">((</span>resolve, reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        setTimeout<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            resolve<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>, 600<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>const fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    fn1.then<span class="token punctuation">(</span>res1 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span> //1        fn2<span class="token punctuation">(</span><span class="token punctuation">)</span>.then<span class="token punctuation">(</span>res2 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console.log<span class="token punctuation">(</span>res2<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>吐槽</strong><br>如果这样调用异步函数，不怕形成地域回调吗？</p><p><strong>改进</strong></p><pre class="line-numbers language-bash"><code class="language-bash">const fn <span class="token operator">=</span> async<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    const res1 <span class="token operator">=</span> await fn1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cosnt res2 <span class="token operator">=</span> await fn2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console.log<span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span> //1    console.log<span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span> //2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充</strong><br>但是要做并发请求时，还是要用到<code>Promise.all()</code></p><pre class="line-numbers language-bash"><code class="language-bash">const fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Promise.all<span class="token punctuation">(</span><span class="token punctuation">[</span>fn1<span class="token punctuation">(</span><span class="token punctuation">)</span>, fn2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>.then<span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> //<span class="token punctuation">[</span>1,2<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果并发请求时，只要其中一个异步函数处理完成，就返回结果，要用到<code>Promise.race()</code></p>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue通信（组件间传值）</title>
      <link href="/2022/01/06/vue-zu-jian-jian-chuan-zhi/"/>
      <url>/2022/01/06/vue-zu-jian-jian-chuan-zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue组件间传值"><a href="#Vue组件间传值" class="headerlink" title="Vue组件间传值"></a>Vue组件间传值</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ol><li><strong>作用：</strong> 用于给节点打标识</li></ol><blockquote><p>被用来给元素或子组件注册引用信息（id的替代者）；</p></blockquote><blockquote><p>应用在html标签上获取真实DOM元素，应用在组件标签上是组件实例对象（vc）</p></blockquote><ol start="2"><li><strong>读取方式：</strong> this.$refs.xxxxx</li></ol><blockquote><p>打标识：<code>&lt;h1 ref= &#39;xxx&#39;&gt;.....&lt;/h1&gt;</code>或<code>&lt;School ref= &#39;xxx&#39;&gt;&lt;/School&gt;</code></p></blockquote><blockquote><p>获取：this.$refs.xxx</p></blockquote><h3 id="一、props（父传子）"><a href="#一、props（父传子）" class="headerlink" title="一、props（父传子）"></a>一、props（父传子）</h3><ol><li><strong>作用：</strong> 用于父组件给子组件传递数据</li></ol><blockquote><p>功能：让组件接收外部传过来的数据</p></blockquote><ol start="2"><li><p>传递数据： <code>&lt;Demo name=&#39;xxx&#39; :age=&#39;xxx&#39; :setName=&#39;xxx&#39;/&gt;</code></p></li><li><p>接收数据：</p></li></ol><ul><li><strong>读取方式一：只接收名称</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash">props:<span class="token punctuation">[</span><span class="token string">'name'</span>,<span class="token string">'age'</span>,<span class="token string">'setName'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>读取方式二：</strong> 限制名称和类型</li></ul><pre class="line-numbers language-bash"><code class="language-bash">props:<span class="token punctuation">{</span>    name: String,    age: Number,    setName: Function<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>读取方式三：</strong> 限制名称/类型/必要性/默认值</li></ul><pre class="line-numbers language-bash"><code class="language-bash">props:<span class="token punctuation">{</span>    name:<span class="token punctuation">{</span>        type: String, //类型        required: true, //必要性        default: xxx //默认值    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实要进行修改，那么请复制props的内容到data中一份，然后去修改data中的数据。===&gt; v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></blockquote><h3 id="组件化编码流程（通用）"><a href="#组件化编码流程（通用）" class="headerlink" title="组件化编码流程（通用）"></a>组件化编码流程（通用）</h3><ol><li><p>拆分静态组件：组件要按照功能点拆分抽取，命名不要与html元素冲突</p></li><li><p>实现动态组件：数据的类型、名称是什么，考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p> 2.1 一个组件在用：放在组件自身即可</p><p> 2.2 一些组件在用: 放在他们的共同的父组件上（状态提升）</p></li><li><p>交互——从绑定事件监听开始</p></li></ol><h3 id="二、组件的自定义事件（子传父）"><a href="#二、组件的自定义事件（子传父）" class="headerlink" title="二、组件的自定义事件（子传父）"></a>二、组件的自定义事件（子传父）</h3><blockquote><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<code>事件的回调在A中</code>）</p></blockquote><ol><li><strong>绑定自定义事件</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">在父组件中：<span class="token operator">&lt;</span>Header @addTodo<span class="token operator">=</span><span class="token string">"addTodo"</span>/<span class="token operator">></span>或<span class="token operator">&lt;</span>Header ref<span class="token operator">=</span><span class="token string">"header"</span>/<span class="token operator">></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>mounted<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    this.<span class="token variable">$refs</span>.header.<span class="token variable">$on</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span>, this.addTodo<span class="token punctuation">)</span>  // 回调配置在methods中    或 this.<span class="token variable">$refs</span>.header.<span class="token variable">$on</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span>,<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> // 回调使用箭头函数<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>若想让自定义事件只能触发一次，可以使用once修饰符，或$once方法</p></blockquote><ol start="2"><li><strong>触发自定义事件</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">在子组件中：this.<span class="token variable">$emit</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span>, 数据<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>解绑自定义事件</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">在子组件中：this.<span class="token variable">$off</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>组件上可以绑定原生DOM事件，需要使用native修饰符</p></blockquote><blockquote><p>注意：通过this.$refs.header.$on(‘addTodo’, 回调)绑定自定义事件时，回调<code>要么配置在methods中，要么用箭头函数</code>，否则this指向会出问题!</p></blockquote><h3 id="三、全局事件总线（任意）"><a href="#三、全局事件总线（任意）" class="headerlink" title="三、全局事件总线（任意）"></a>三、全局事件总线（任意）</h3><ol><li>一种组件间通信的方式，适用于<code>任意组件间通信</code></li></ol><blockquote><p>Vue原型对象上包含事件处理的方法</p><blockquote><p>$on(eventName, listener): 绑定自定义事件监听<br>$emit(eventName, data): 分发自定义事件<br>$off(eventName): 解绑自定义事件<br>$once(eventName, listener): 绑定事件监听，但只能处理一次</p></blockquote></blockquote><blockquote><p>所有组件实例对象的原型对象的原型对象就是Vue的原型对象</p><blockquote><p>所有组件对象都能看到Vue原型对象上的属性和方法<br>Vue.prototype.$bus = new Vue(),所有组件对象都能看到$bus这个属性对象</p></blockquote></blockquote><blockquote><p>全局事件总线</p><blockquote><p>包含事件处理相关方法的对象（只有一个）<br>所有组件都可以得到</p></blockquote></blockquote><ol start="2"><li>安装全局事件总线：</li></ol><pre class="line-numbers language-bash"><code class="language-bash">入口文件main.js中：new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    beforeCreate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> // 尽量早的执行挂载全局事件总线对象的操作        Vue.prototype.<span class="token variable">$bus</span> <span class="token operator">=</span> this // 安装全局事件总线，<span class="token variable">$bus</span>就是当前应用的vm    <span class="token punctuation">}</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.<span class="token variable">$mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>绑定事件（使用事件总线）：</p><p> 3.1 接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<code>回调留在A组件自身</code></p><pre class="line-numbers language-bash"><code class="language-bash">methods<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    demo<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>mounted<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.<span class="token variable">$bus</span><span class="token keyword">.</span><span class="token variable">$on</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span>,this.demo<span class="token punctuation">)</span><span class="token punctuation">}</span>beforeDestroy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.<span class="token variable">$bus</span><span class="token keyword">.</span><span class="token variable">$off</span><span class="token punctuation">(</span>'xxxx<span class="token punctuation">)</span> // 解绑事件：最好在beforeDestroy钩子中，用<span class="token variable">$off</span>去解绑<span class="token variable"><span class="token variable">`</span>当前组件所用到的<span class="token variable">`</span></span>事件<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 3.2 分发事件（提供数据）：this.$bus.$emit(‘xxxx’, 数据)</p></li></ol><h3 id="四、消息订阅与发布（任意）"><a href="#四、消息订阅与发布（任意）" class="headerlink" title="四、消息订阅与发布（任意）"></a>四、消息订阅与发布（任意）</h3><ol><li>一种组件间通信的方式，适用于<code>任意组件间通信</code></li></ol><blockquote><p>与全局事件总线很相似，但需要引入第三方库，更推荐使用全局事件总线</p></blockquote><blockquote><p>它包含以下操作：</p><blockquote><p>订阅消息 –对应绑定事件监听<br>发布消息 –分发事件<br>取消消息订阅 –解绑事件监听</p></blockquote></blockquote><blockquote><p>相关语法：</p><blockquote><p>pubsub.subscribe(‘msgName’, function(msgName, data){ })<br>pubsub.publish(‘msgName’, data)<br>pubsub.unsubscribe(token)</p></blockquote></blockquote><ol start="2"><li><p>使用步骤</p><p> 2.1 安装pubsub: npm i -S pubsub-js</p><p> 2.2 引入：import pubsub from ‘pubsub-js’</p><p> 2.3 接受数据：A组件想接受数据，则在A组件中订阅消息，订阅的<code>回调留在A组件自身</code></p><pre class="line-numbers language-bash"><code class="language-bash">methods<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    demo<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>mounted<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.pid <span class="token operator">=</span> pubsub.subscribe<span class="token punctuation">(</span><span class="token string">'xxx'</span>, this.demo<span class="token punctuation">)</span> // 订阅消息<span class="token punctuation">}</span>beforeDestroy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pubsub.unsubscribe<span class="token punctuation">(</span>this.pid<span class="token punctuation">)</span> //最好在beforeDestroy钩子中，用pubSub.unsubscribe<span class="token punctuation">(</span>this.pid<span class="token punctuation">)</span>去<span class="token variable"><span class="token variable">`</span>取消订阅<span class="token variable">`</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 2.4 提供数据：pubsub.publish(‘xxx’, 数据) // 发布消息</p></li></ol><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><ol><li><p>语法： this.$nextTick(回调函数)</p></li><li><p>作用：在下一次DOM更新结束后执行其指定的回调</p></li><li><p>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行</p></li></ol><h3 id="五、插槽（父传子）"><a href="#五、插槽（父传子）" class="headerlink" title="五、插槽（父传子）"></a>五、插槽（父传子）</h3><ol><li>作用：让父组件可以向子组件指定位置插入<code>html结构</code>，也是一种组件间通信的方式，适用于<code>父组件===&gt;子组件</code></li></ol><blockquote><p>父组件向子组件传递<code>带数据</code>的标签，当一个组件有不确定的结构时，就需要使用slot技术。注意：插槽内容是在父组件中编译后，再传递给子组件的。</p></blockquote><ol start="2"><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ul><li>默认插槽：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">父组件中：    <span class="token operator">&lt;</span>Category<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/Category<span class="token operator">></span>子组件中：    <span class="token operator">&lt;</span>template<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 定义插槽 --<span class="token operator">></span>            <span class="token operator">&lt;</span>slot<span class="token operator">></span>插槽默认内容<span class="token punctuation">..</span>.<span class="token operator">&lt;</span>/slot<span class="token operator">></span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>具名插槽：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">  父组件中：    <span class="token operator">&lt;</span>Category<span class="token operator">></span>        <span class="token operator">&lt;</span>template slot<span class="token operator">=</span> <span class="token string">"center"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构1<span class="token operator">&lt;</span>/div<span class="token operator">></span>        <span class="token operator">&lt;</span>/template<span class="token operator">></span>        <span class="token operator">&lt;</span>template v-slot: footer<span class="token operator">></span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构2<span class="token operator">&lt;</span>/div<span class="token operator">></span>        <span class="token operator">&lt;</span>/template<span class="token operator">></span>    <span class="token operator">&lt;</span>/Category<span class="token operator">></span>子组件中：    <span class="token operator">&lt;</span>template<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 定义插槽 --<span class="token operator">></span>            <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>插槽默认内容<span class="token punctuation">..</span>.<span class="token operator">&lt;</span>/slot<span class="token operator">></span>            <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>插槽默认内容<span class="token punctuation">..</span>.<span class="token operator">&lt;</span>/slot<span class="token operator">></span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>作用域插槽：</p><ol><li><p>理解：<code>数据在组件（儿子）的自身，但根据数据生成的结构需要组件的使用者（爹）来决定</code>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体代码：</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">父组件中：    <span class="token operator">&lt;</span>Category<span class="token operator">></span>        <span class="token operator">&lt;</span>template scope <span class="token operator">=</span> <span class="token string">"scopeData"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 生成的是ul列表 --<span class="token operator">></span>            <span class="token operator">&lt;</span>ul<span class="token operator">></span>                <span class="token operator">&lt;</span>li v-for<span class="token operator">=</span><span class="token string">"g in scopedData.games"</span> :key<span class="token operator">=</span><span class="token string">"g"</span><span class="token operator">></span>                    <span class="token punctuation">{</span><span class="token punctuation">{</span>g<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>/li<span class="token operator">></span>            <span class="token operator">&lt;</span>/ul<span class="token operator">></span>        <span class="token operator">&lt;</span>/template<span class="token operator">></span>    <span class="token operator">&lt;</span>Category<span class="token operator">></span>    <span class="token operator">&lt;</span>Category<span class="token operator">></span>        <span class="token operator">&lt;</span>template slot-sope <span class="token operator">=</span> <span class="token string">"scopeData"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 生成的是h4标题 --<span class="token operator">></span>            <span class="token operator">&lt;</span>h4 v-for <span class="token operator">=</span> <span class="token string">"g in scopedData.games"</span> :key <span class="token operator">=</span> <span class="token string">"g"</span><span class="token operator">></span>                <span class="token punctuation">{</span><span class="token punctuation">{</span>g<span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>/h4<span class="token operator">></span>        <span class="token operator">&lt;</span>/template<span class="token operator">></span>    <span class="token operator">&lt;</span>Category<span class="token operator">></span>子组件中：    <span class="token operator">&lt;</span>template<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>slot :games<span class="token operator">=</span><span class="token string">"games"</span><span class="token operator">></span><span class="token operator">&lt;</span>/slot<span class="token operator">></span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/template<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token function">export</span> default <span class="token punctuation">{</span>            name: <span class="token string">'Category'</span>,            props: <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>,            // 数据在子组件自身            data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    games: <span class="token punctuation">[</span><span class="token string">'红色警戒'</span>,<span class="token string">'穿越火线'</span>,<span class="token string">'劲舞团'</span>,<span class="token string">'超级玛丽'</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="六、vuex-任意-——共享单车"><a href="#六、vuex-任意-——共享单车" class="headerlink" title="六、vuex(任意)——共享单车"></a>六、vuex(任意)——共享单车</h3><ol><li><strong>概念</strong></li></ol><p>在vue中事件集中式状态（数据）管理的一个vue<code>插件</code>，对Vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，并且适用于任意组件间通信。</p><ol start="2"><li><strong>何时使用？</strong></li></ol><p>多个组件需要共享数据时</p><p><strong>vuex工作原理图</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kincar/image@main/vuex.png" alt="vuex工作原理图" title="vuex工作原理图"></p><ol start="3"><li><p>搭建vuex环境</p><p> （1）创建文件：src/store/index.js</p><pre class="line-numbers language-bash"><code class="language-bash">//引入Vue核心库<span class="token function">import</span> Vue from <span class="token string">'vue'</span>//引入Vuex<span class="token function">import</span> Vuex from <span class="token string">'vuex'</span>//应用Vuex插件Vue.use<span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>//准备actions对象--响应组件中用户的动作const actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>//准备mutations对象--修改state中的数据const mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>//准备state对象--保存具体的数据const state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>//创建并暴露store<span class="token function">export</span> default new Vuex.Store<span class="token punctuation">(</span><span class="token punctuation">{</span>    actions,    mutations,    state<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （2）在main.js中创建vm时传入store配置项</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>//引入store<span class="token function">import</span> store from <span class="token string">'./store'</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>//创建vmnew Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>    el: <span class="token string">'#app'</span>,    render: h<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>,    store<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基本使用</p><blockquote><p>vuex核心概念和API</p><blockquote><p><strong>store（营业执照）</strong><br><strong>state（菜）：</strong><br>vuex管理的状态对象；<br>它应该是唯一的<br><strong>actinos（传菜员）：</strong><br>值是一个对象，包含多个响应用户动作的回调函数；<br>通过commit()来触发mutation中函数的调用，<code>间接更新</code>state；<br>如何触发actions中的回调？ == 在组件中使用<code>$store.dispatch(&#39;对应的action回调名&#39;)</code>触发；<br>可以包含异步代码（定时器，Ajax等等）<br><strong>mutations（大厨）：</strong><br>值是一个对象，包含多个<code>直接更新</code>state的方法;<br>谁能调用mutations中的方法？如何调用？ == 在action中使用：commit(‘对应的mutation是方法名’)触发<br>mutations中方法的特点：不能写异步代码、只能单纯的操作state<br><strong>getters（调料）：</strong><br>值为一个对象，包含多个用于返回数据的函数<br>如何使用？ == $store.getters.xxx</p></blockquote></blockquote><p> （1）初始化数据、配置actions、配置mutations，操作文件store.js</p><pre class="line-numbers language-bash"><code class="language-bash">//引入Vue核心库<span class="token function">import</span> Vue from <span class="token string">'vue'</span>//引入Vuex<span class="token function">import</span> Vuex from <span class="token string">'vuex'</span>//应用Vuex插件Vue.use<span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>（不推荐）const actions <span class="token operator">=</span> <span class="token punctuation">{</span>    //响应组件中加的动作    jia<span class="token punctuation">(</span>context,value<span class="token punctuation">)</span><span class="token punctuation">{</span>        //context（上下文），mini版Store        console.log<span class="token punctuation">(</span><span class="token string">'actions中的jia被调用了'</span><span class="token punctuation">)</span>        context.commit<span class="token punctuation">(</span><span class="token string">'JIA'</span>,value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>es6解构赋值简化写法（推荐使用！）：const actions <span class="token operator">=</span> <span class="token punctuation">{</span>    jia<span class="token punctuation">(</span><span class="token punctuation">{</span>commit<span class="token punctuation">}</span>, value<span class="token punctuation">)</span><span class="token punctuation">{</span>        commit.<span class="token punctuation">(</span><span class="token string">'JIA'</span>,value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>const mutations <span class="token operator">=</span> <span class="token punctuation">{</span>    //执行加    JIA<span class="token punctuation">(</span>state,value<span class="token punctuation">)</span><span class="token punctuation">{</span>        console.log<span class="token punctuation">(</span><span class="token string">'mutations中的JIA被调用了'</span><span class="token punctuation">)</span>        state.sum +<span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">}</span>//初始化数据const state <span class="token operator">=</span> <span class="token punctuation">{</span>    sum: 0<span class="token punctuation">}</span>//创建并暴露store<span class="token function">export</span> default new Vuex.Store<span class="token punctuation">(</span><span class="token punctuation">{</span>    actions,    mutations,    state,<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （2）组件中读取Vuex中的数据：$store.state.sum</p><p> （3）组件中修改Vuex中的数据：$store.dispatch(‘actions中的方法名’,数据)或$store.commit(‘mutations中的方法名’,数据)</p><blockquote><p>备注：若没有<code>网络请求或其他业务逻辑</code>，组件中也可以越过actions，即不写<code>dispatch</code>，直接写<code>commit</code></p></blockquote></li><li><p>getters的使用</p><p> （1）概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p><p> （2）在store.js中追加getters配置</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>const getters <span class="token operator">=</span> <span class="token punctuation">{</span>    bigSum<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> state.sum * 10    <span class="token punctuation">}</span><span class="token punctuation">}</span>//创建并暴露store<span class="token function">export</span> default new Vuex.Store<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>    getters<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （3）组件中读取数据：$store.getters.bigSum</p></li><li><p>四个map方法的使用（简化代码–推荐使用！不用再写state、getters、commit、diapatch之类的，vuex内部帮我们封装好了）</p><p> （1）<strong>mapState方法：</strong>用于帮助我们映射state中的数据为计算属性</p><pre class="line-numbers language-bash"><code class="language-bash">computed: <span class="token punctuation">{</span>    //借助mapState生成计算属性：sum、school、subject（对象写法）    <span class="token punctuation">..</span>.mapState<span class="token punctuation">(</span><span class="token punctuation">{</span>sum:<span class="token string">'sum'</span>, school:<span class="token string">'school'</span>, subject:<span class="token string">'subject'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    //借助mapState生成计算属性：sum、school、subject（数组写法）--推荐使用，更简单！    <span class="token punctuation">..</span>.mapState<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span>, <span class="token string">'school'</span>, <span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （2）<strong>mapGetters方法：</strong>用于帮助我们映射getters中的数据为计算属性</p><pre class="line-numbers language-bash"><code class="language-bash">computed: <span class="token punctuation">{</span>    //借助mapGetters生成计算属性：bigSum（对象写法）    <span class="token punctuation">..</span>.mapGetters<span class="token punctuation">(</span><span class="token punctuation">{</span>bigSum:<span class="token string">'bigSum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    //借助mapGetters生成计算属性：bigSum（数组写法）--推荐使用，更简单！    <span class="token punctuation">..</span>.mapGetters<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （3）<strong>mapActions方法：</strong>用于帮助我们生成与actions对话的方法，即：包含$store.dispatch(xxx)的函数</p><pre class="line-numbers language-bash"><code class="language-bash">methods: <span class="token punctuation">{</span>    //靠mapActions生成：incrementOdd、incrementWait（对象形式）    <span class="token punctuation">..</span>.mapActions<span class="token punctuation">(</span><span class="token punctuation">{</span>incrementOdd: <span class="token string">'jiaOdd'</span>, incrementWait: <span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    //靠mapActions生成：incrementOdd、incrementWait（数组形式）    <span class="token punctuation">..</span>.mapActions<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span>,<span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （4）<strong>mapMutations方法：</strong>用于帮助我们生成与mutations对话的方法，即：包含$store.commit(xxx)的函数</p><pre class="line-numbers language-bash"><code class="language-bash">methods: <span class="token punctuation">{</span>    //靠mapMutations生成：increment、decrement（对象形式）    <span class="token punctuation">..</span>.mapMutatinos<span class="token punctuation">(</span><span class="token punctuation">{</span>increment:<span class="token string">'JIA'</span>, decrement:<span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    //靠mapMutations生成：JIA、JIAN（数组形式）    <span class="token punctuation">..</span>.mapMutations<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span>,<span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>h1<span class="token operator">></span>当前求和为：<span class="token punctuation">{</span><span class="token punctuation">{</span>sum<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h1<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>当前求和放大10倍为：<span class="token punctuation">{</span><span class="token punctuation">{</span>bigSum<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h3<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>我在<span class="token punctuation">{</span><span class="token punctuation">{</span>school<span class="token punctuation">}</span><span class="token punctuation">}</span>，学习<span class="token punctuation">{</span><span class="token punctuation">{</span>subject<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/h3<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"increment(n)"</span><span class="token operator">></span>+<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"decrement(n)"</span><span class="token operator">></span>-<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"incrementOdd(n)"</span><span class="token operator">></span>当前求和为奇数再加<span class="token operator">&lt;</span>/button<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"incrementWait(n)"</span><span class="token operator">></span>等一等再加<span class="token operator">&lt;</span>/button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>模块化+命名空间</strong></p><p> （1）目的：让代码更好维护，让多种数据分类更加明确</p><p> （2）修改store.js</p><blockquote><p>包含多个moudule；一个module是一个store的配置对象；与一个组件（包含共享数据）对应</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">const countAbout <span class="token operator">=</span> <span class="token punctuation">{</span>    namespaced: true, //开启命名空间    state: <span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span>,    mutations: <span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span>,    getters: <span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token punctuation">}</span>const personAbout <span class="token operator">=</span> <span class="token punctuation">{</span>    namespaced: true, //开启命名空间    state: <span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span>,    mutations: <span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span>,    actions: <span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">export</span> default new Vuex.Store<span class="token punctuation">(</span><span class="token punctuation">{</span>    modules: <span class="token punctuation">{</span>        countAbout,        personAbout    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （3）开启命名空间后，组件中读取state数据：</p><pre class="line-numbers language-bash"><code class="language-bash">//方式一：自己直接读取this.<span class="token variable">$store</span>.state.personAbout.list//方式二：借助mapState读取：<span class="token punctuation">..</span>.mapState<span class="token punctuation">(</span><span class="token string">'countAbout'</span>,<span class="token punctuation">[</span><span class="token string">'sum'</span>,<span class="token string">'school'</span>,<span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （4）开启命名空间后，组件中读取getters数据：</p><pre class="line-numbers language-bash"><code class="language-bash">//方式一：自己直接dispatchthis.<span class="token variable">$store</span>.dispatch<span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span>, person<span class="token punctuation">)</span>//方式二：借助mapGetters读取<span class="token punctuation">..</span>.mapGetters<span class="token punctuation">(</span><span class="token string">'countAbout'</span>,<span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （5）开启命名空间后，组件中调用dispatch</p><pre class="line-numbers language-bash"><code class="language-bash">//方式一：自己直接dispatchthis.<span class="token variable">$store</span>.dispatch<span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span>,perosn<span class="token punctuation">)</span>//方拾二：借助mapActions：<span class="token punctuation">..</span>.mapActions<span class="token punctuation">(</span><span class="token string">'countAbout'</span>,<span class="token punctuation">{</span>incrementOdd:<span class="token string">'jiaOdd'</span>, incrementWait:<span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> （6）开启命名空间后，组件中调用commit</p><pre class="line-numbers language-bash"><code class="language-bash">//方式一：自己直接committhis.<span class="token variable">$store</span>.commit<span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span>, person<span class="token punctuation">)</span>//方式二：借助mapMutations：<span class="token punctuation">..</span>.mapMutations<span class="token punctuation">(</span><span class="token string">'countAbout'</span>,<span class="token punctuation">{</span>increment:<span class="token string">'JIA'</span>, decrement:<span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue常用内置指令</title>
      <link href="/2022/01/03/vue-nei-zhi-zhi-ling/"/>
      <url>/2022/01/03/vue-nei-zhi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue-常用内置指令"><a href="#Vue-常用内置指令" class="headerlink" title="Vue 常用内置指令"></a>Vue 常用内置指令</h2><blockquote><p>模板语法分为两类：插值语法和指令语法</p><blockquote><p><strong>插值语法</strong>：用于解析标签体内容。<br>写法是<code>&#123;&#123;xxx&#125;&#125;</code>，xxx 是 js 表达式，并且可以直接读取到 data 中的所有属性<br><strong>指令语法</strong>：用于解析标签（包含：标签属性、标签体内容、绑定事件…）<br>举例：v-bind:href = “xxx”或简写为:href= “xxx”，xxx 同样是 js 表达式，并且可以直接读取到 data 中的所有属性。<br>注意：Vue 中有很多指令，并且形式都是 v-???</p></blockquote></blockquote><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><ul><li><p>更新元素的<code>textContent</code></p></li><li><p>向指定节点渲染文本内容，会替换掉原节点内容</p></li></ul><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><ul><li><p>更新元素的<code>innerHTML</code></p></li><li><p>向指定节点渲染包含 HTML 结构的内容，会替换掉原节点的内容</p></li><li><p>严重注意：有安全性问题，容易导致 XSS 攻击，一定要用在可信的内容上，永远不要用在用户提交的内容上</p></li></ul><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><ul><li><p>如果为 true，当前标签才会输出到页面</p></li><li><p>动态控制节点是否存在</p></li><li><p>不展示的 DOM 元素直接被移除，适用于切换频率较低的场景</p></li></ul><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><ul><li><p>如果为 false，当前标签才会输出到页面</p></li><li><p>与 v-if、v-else-if 搭配使用</p></li></ul><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><ul><li><p>通过控制 diaplay 样式来控制显示/隐藏</p></li><li><p>动态控制节点是否展示</p></li><li><p>不展示的 DOM 元素未被移除，仅仅是使用样式隐藏掉，适用于切换频率较高的场景</p></li></ul><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><ul><li>遍历数组、对象、字符串</li></ul><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li>绑定事件监听，一般简写为 <code>@</code></li></ul><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ul><li><p>绑定解析表达式，一般简写为 <code>:xxx</code></p></li><li><p>单向数据绑定。数据只能从 data 流向页面</p></li></ul><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><ul><li><p>双向数据绑定。数据不仅能从 data 流向页面，还可以从页面流向 data</p></li><li><p>一般都应用在<code>表单类</code>元素上（如：input、select）</p></li><li><p>v-model:value 可简写为<code> v-model</code>，因为它默认收集的就是 value 值</p></li></ul><h3 id="v-cloak（没有值）"><a href="#v-cloak（没有值）" class="headerlink" title="v-cloak（没有值）"></a>v-cloak（没有值）</h3><ul><li><p>vue 实例创建完毕并接管容器后，会删除掉 v-cloak 属性</p></li><li><p>与 css 配合：<code>[v-cloak]&#123;diaplay: none&#125;</code>可以解决网速慢时页面展示出的问题</p></li></ul><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><ul><li>所在节点初次动态渲染后，就视为静态内容了。以后的数据结构改变不会引起 v-once 所在结构的更新，可以用于优化性能</li></ul><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><ul><li>跳过其所在节点的编译过程，可以用它来跳过没有使用指令语法、插值语法的节点，加快编译</li></ul>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的key</title>
      <link href="/2022/01/02/vue-zhong-de-key/"/>
      <url>/2022/01/02/vue-zhong-de-key/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vue、React-中的-key-有什么作用？"><a href="#Vue、React-中的-key-有什么作用？" class="headerlink" title="Vue、React 中的 key 有什么作用？"></a>Vue、React 中的 key 有什么作用？</h1><h2 id="虚拟-DOM-中-key-的作用"><a href="#虚拟-DOM-中-key-的作用" class="headerlink" title="虚拟 DOM 中 key 的作用"></a>虚拟 DOM 中 key 的作用</h2><p>key 是虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据<code>新数据</code>生成<code>新的虚拟DOM</code>，随后 Vue 进行<code>新虚拟DOM</code>与<code>旧虚拟DOM</code>的差异比较，比较规则如下</p><h2 id="对比规则"><a href="#对比规则" class="headerlink" title="对比规则"></a>对比规则</h2><ol><li><p>旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：</p><ul><li><p>若虚拟 DOM 中内容没变，直接使用之前的真实 DOM！</p></li><li><p>若虚拟 DOM 中内容变了，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM</p></li></ul></li><li><p> 旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key，创建新的真实 DOM，随后渲染到页面。</p></li></ol><h2 id="用-index-作为-key-可能引发的问题"><a href="#用-index-作为-key-可能引发的问题" class="headerlink" title="用 index 作为 key 可能引发的问题"></a>用 index 作为 key 可能引发的问题</h2><ul><li><p>若对数据进行逆序添加、逆序删除等破坏顺序操作：会产生没有必要的真实 DOM 更新 ==&gt; 界面效果没问题，但效率低</p></li><li><p>如果结构中还包含输入类的 DOM：会产生错误 DOM 更新 ==&gt; 界面有问题<br><img src="https://cdn.jsdelivr.net/gh/kincar/image@main/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220102213548.png" alt="添加前"><br><img src="https://cdn.jsdelivr.net/gh/kincar/image@main/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220102213727.png" alt="添加后"></p></li></ul><h2 id="开发中如何选择-key？"><a href="#开发中如何选择-key？" class="headerlink" title="开发中如何选择 key？"></a>开发中如何选择 key？</h2><ul><li><p>最好使用每条数据的唯一标识作为 key，比如 id、手机号、身份证号、学号等<code>唯一值</code></p></li><li><p>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表、用于展示，使用 index 作为 key 是没有问题的</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> key </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2021/12/29/markdawn-ji-ben-yu-fa/"/>
      <url>/2021/12/29/markdawn-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown-基础语法"><a href="#Markdown-基础语法" class="headerlink" title="Markdown 基础语法"></a>Markdown 基础语法</h1><h2 id="一、标题（常用）"><a href="#一、标题（常用）" class="headerlink" title="一、标题（常用）"></a>一、标题（常用）</h2><p>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><blockquote><p>注意：标准语法一般在#后跟个空格再写文字。</p></blockquote><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这是一级标题</span><span class="token comment" spellcheck="true">## 这是二级标题</span><span class="token comment" spellcheck="true">### 这是三级标题</span><span class="token comment" spellcheck="true">#### 这是四级标题</span><span class="token comment" spellcheck="true">##### 这是五级标题</span><span class="token comment" spellcheck="true">###### 这是六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h2 id="二、字体（常用）"><a href="#二、字体（常用）" class="headerlink" title="二、字体（常用）"></a>二、字体（常用）</h2><ul><li><strong>加粗：</strong></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><em>斜体：</em></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><strong><em>斜体加粗：</em></strong></li></ul><p>要倾斜和加粗的文字分别用三个*号包起来</p><ul><li><del>删除线：</del></li></ul><p>要加删除线的问女子左右分别用两个~~号包起来</p><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash">**我是加粗的文字***我是倾斜的文字****我是斜体加粗的文字***~~我是加删除线的文字~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><strong>我是加粗的文字</strong></p><p><em>我是倾斜的文字</em></p><p><strong><em>我是斜体加粗的文字</em></strong></p><p><del>我是加删除线的文字</del></p><h2 id="三、引用（常用）"><a href="#三、引用（常用）" class="headerlink" title="三、引用（常用）"></a>三、引用（常用）</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n 个…，<br>貌似可以一直加，但没神马卵用</p><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">></span> 一盏灯， 一片昏黄； 一简书， 一杯淡茶。<span class="token operator">>></span> 守着那一份淡定， 品读属于自己的寂寞。<span class="token operator">>></span><span class="token operator">></span>  保持淡定， 才能欣赏到最美丽的风景！<span class="token operator">>></span><span class="token operator">>></span> 保持淡定， 人生从此不再寂寞。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。</p><blockquote><p>守着那一份淡定， 品读属于自己的寂寞。</p><blockquote><p>保持淡定， 才能欣赏到最美丽的风景！</p><blockquote><p>保持淡定， 人生从此不再寂寞。</p></blockquote></blockquote></blockquote></blockquote><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或者三个以上的-或者*都可以</p><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash">-------*******<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><hr><hr><hr><hr><h2 id="五、图片（常用）"><a href="#五、图片（常用）" class="headerlink" title="五、图片（常用）"></a>五、图片（常用）</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>图片alt<span class="token punctuation">]</span><span class="token punctuation">(</span>图片地址 <span class="token string">"图片title"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>图片 alt 就是显示在图片下面的文字，相当于对图片内容的解释<br>图片 title 是图片的标题，当鼠标移到图片上时显示的内容。title 可加可不加</p><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>blockchain<span class="token punctuation">]</span><span class="token punctuation">(</span>https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u<span class="token operator">=</span>702257389,1274025419<span class="token operator">&amp;</span>fm<span class="token operator">=</span>27<span class="token operator">&amp;</span>gp<span class="token operator">=</span>0.jpg <span class="token string">"区块链"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&fm=27&gp=0.jpg" alt="blockchain" title="区块链"></p><p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p><p>markdown 格式追求的是简单、多平台统一。name 图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。</p><p>关于图床的选择，可以看看这一篇文章：</p><p><a href="https://www.jianshu.com/p/ea1eb11db63f">markdown 图床</a></p><h2 id="六、超链接（常用）"><a href="#六、超链接（常用）" class="headerlink" title="六、超链接（常用）"></a>六、超链接（常用）</h2><p>语法：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>超链接<span class="token punctuation">]</span><span class="token punctuation">(</span>超链接地址 <span class="token string">"超链接title"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>title 可加可不加</p><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>简书<span class="token punctuation">]</span><span class="token punctuation">(</span>http://jianshu.com<span class="token punctuation">)</span><span class="token punctuation">[</span>百度<span class="token punctuation">]</span><span class="token punctuation">(</span>http://baidu.com<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><a href="http://jianshu.com/">简书</a></p><p><a href="http://baidu.com/">百度</a></p><blockquote><p>注意：Markdown 本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用 html 语言的 a 标签代替</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"超链接地址"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>超链接名<span class="token operator">&lt;</span>/a<span class="token operator">></span>示例：<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://www.jianshu.com/u/1f5ac0cf6a8b"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>简书<span class="token operator">&lt;</span>/a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：<br><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><h2 id="七、列表（常用）"><a href="#七、列表（常用）" class="headerlink" title="七、列表（常用）"></a>七、列表（常用）</h2><p><strong>无序列表</strong></p><p>语法：</p><p>无序列表用 - + * 任何一种都可以</p><pre class="line-numbers language-bash"><code class="language-bash">    - 列表内容    + 类表内容    * 列表内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：-+*跟内容之间都要有一个空格</p></blockquote><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p><strong>有序列表</strong></p><p>语法：</p><p>数字加点</p><pre class="line-numbers language-bash"><code class="language-bash">    1. 列表内容    2. 列表内容    3. 列表内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：序号跟内容之间要有空格</p></blockquote><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><p><strong>列表嵌套</strong></p><p>上一级和下一级之间敲三个空格即可</p><ul><li><p>一级无序列表</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级无序列表</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li><p>一级有序列表</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级有序列表</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><h2 id="八、表格（常用）"><a href="#八、表格（常用）" class="headerlink" title="八、表格（常用）"></a>八、表格（常用）</h2><p>语法：</p><pre class="line-numbers language-bash"><code class="language-bash">表头<span class="token operator">|</span>表头<span class="token operator">|</span>表头---<span class="token operator">|</span>:---:<span class="token operator">|</span>---:内容<span class="token operator">|</span>内容<span class="token operator">|</span>内容内容<span class="token operator">|</span>内容<span class="token operator">|</span>内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二行分割表头和内容<br>有一个就行，为了对齐，多加了几个<br>文字默认居左 -两边加：表示文字居中 -右边加：表示文字居右</p><blockquote><p>注意：原生的语法两边都要用|包起来。此处省略</p></blockquote><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash">    姓名<span class="token operator">|</span>技能<span class="token operator">|</span>排行    --<span class="token operator">|</span>:--:<span class="token operator">|</span>--:    刘备<span class="token operator">|</span>哭<span class="token operator">|</span>大哥    关羽<span class="token operator">|</span>打<span class="token operator">|</span>二哥    张飞<span class="token operator">|</span>骂<span class="token operator">|</span>三弟<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h2 id="九、代码（常用）"><a href="#九、代码（常用）" class="headerlink" title="九、代码（常用）"></a>九、代码（常用）</h2><p>语法：</p><p>单行代码（只有一段，不分行）：代码之间分别用一个反引号`包起来</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span>代码内容<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码块（多行）：代码之间分别用三个反引号```包起来，并且两边的反引号单独占一行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>``<span class="token variable"><span class="token variable">`</span><span class="token punctuation">)</span>    代码<span class="token punctuation">..</span>.    代码<span class="token punctuation">..</span>.    代码<span class="token punctuation">..</span>.<span class="token punctuation">(</span><span class="token variable">`</span></span>``<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：为了防止转义，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可</p></blockquote><p>示例：</p><p>单行代码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span>create Vue Demo<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码块</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>```<span class="token punctuation">)</span>    <span class="token keyword">function</span> fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'这是一段牛逼的代码'</span>    <span class="token punctuation">}</span>    fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>```<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p>单行代码</p><p><code>create Vue Demo</code></p><p>代码块</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">function</span> fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">'这是一段牛逼的代码'</span><span class="token punctuation">}</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo基本用法</title>
      <link href="/2021/12/28/hello-world/"/>
      <url>/2021/12/28/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎光临[Hexo] (<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a>) ! 这是你的第一篇文章。 查看<a href="https://hexo.io/zh-cn/docs/">文档</a>获取更多信息。 如果你在使用 Hexo 时遇到任何问题，你可以在<a href="https://hexo.io/zh-cn/docs/troubleshooting.html">故障排除</a>中找到答案，或者你可以在<a href="https://github.com/hexojs/hexo/issues">GitHub</a>上问我。</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h3><blockquote><p>新建一篇文章</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>文章标题可以在对应 md 文件里改，新建时标题可以写的简单写</p></blockquote><p>More info: <a href="https://hexo.io/zh-cn/docs/writing.html">Writing</a></p><h3 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h3><blockquote><p>启动服务器，用于预览主题，默认地址： <a href="http://localhost:4000/">http://localhost:4000/</a></p></blockquote><blockquote><p>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可</p></blockquote><blockquote><p>对 Hexo 根目录_config.yml 的修改，需要重启本地服务器才能预览效果</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-p 重设端口</p><p>More info: <a href="https://hexo.io/zh-cn/docs/server.html">Server</a></p><h3 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h3><blockquote><p>生成静态文件到默认设置的 public 文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-d 文件生成后立即部署网站<br>-w 监视文件变动</p><p>More info: <a href="https://hexo.io/zh-cn/docs/generating.html">Generating</a></p><h3 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h3><blockquote><p>自动生成网站静态文件，并部署到设定的仓库</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-g 部署之前预先生成静态文件</p><p>More info: <a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">Deployment</a></p><h3 id="hexo-cl"><a href="#hexo-cl" class="headerlink" title="hexo cl"></a>hexo cl</h3><blockquote><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)</p></blockquote><blockquote><p>网站显示异常时可以执行这条命令试试</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="hexo-new-page"><a href="#hexo-new-page" class="headerlink" title="hexo new page"></a>hexo new page</h3><pre class="line-numbers language-bash"><code class="language-bash">hexo new page xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>新建一个标题为 xxx 的页面，默认链接地址为主页地址/xxx/</p></blockquote><blockquote><p>标题可以为中文，但一般习惯用英文</p></blockquote><blockquote><p>页面标题和文章一样可以随意修改</p></blockquote><blockquote><p>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
